#+TITLE: Notes

* History
- Started with the example file in `litex-boards`
- Added uart probe based on https://github.com/TomKeddie/prj-litex/blob/master/colorlight-5a-75b/uart-probe/colorlight-uart-probe.py
* Resources used
- nixpkgs
- litex (with yosys, openocd, iverilog, migen, etc.)
- chubby75 reverse eng. project
- https://github.com/enjoy-digital/litex/wiki/LiteX-for-Hardware-Engineers
- Getting started https://github.com/litex-hub/fpga_101/
- Migen manual https://m-labs.hk/migen/manual/fhdl.html
* Stuff to keep in mind
- Eth performance increases/compliance
  - Seperate clock https://github.com/litex-hub/wishbone-utils/issues/24
  - Wider bus https://github.com/enjoy-digital/liteeth/pull/21
* Ideas
- Split r0 & r1 up, just like every other panel, since there's nothing special about them
* DATASHEETS
- ICN2028 http://www.xlix.ru/datasheet/ICN2053.pdf
* Protocol description
- https://bikerglen.com/projects/lighting/led-panel-1up/
- https://www.doityourselfchristmas.com/wiki/index.php?title=E1.31_(Streaming-ACN)_Protocol (maybe)
- Art-Net or TPM2.net (https://shop.dmx4all.de/en/new-products/hub75e-dot-matrix-control.html)
* Usefull stuff (unused)
- Migen Clock Domain Summary
  https://gist.github.com/cr1901/5de5b276fca539b66fe7f4493a5bfe7d
* Pros for migen & litex
(partially based on https://www.bunniestudios.com/blog/?p=5018)
- Fast
- Fail early
- Great metascripting capabilities
* hub75 output pipeline
We can read 4 bytes of ram once per cycle -> just use 3, makes rgb nicer
Pipeline for palette mode:
1. Read 1 byte from ram (maybe internal)
2. palette lookup (split in three paths, rgb)
2. gamma table & bitmask output
Pipeline for direct mode:
1. Read 3 bytes from ram
2. Buffer it, to make the pipeline fit with the palette mode
3. Gamma lookup

3 cycles latency, each output is buffered and flips on the display down clock

When is the memory written? Palettes can be dual port ram, but image data (at
least for direct mode) can't, since we don't have dual port ram

Just buffer the data and write it, when the longest OE is set, which we *should*
make long enough, so that there's enough time without shifting

The pipeline is flushed while the data is being latched
* Memory layout
Since we always read 4 bytes, just use the upper byte for the indexed image
ander the lower 3 bytes for rgb -> rgbi
We can reuse sram access & indexing code
* 210126
** Shifting Improvements
Shift from ping-pong buffer. While shifting out, load next values from SDRAM.
Have a couple of separate memories, to enable parallel data processing (512 pixels of data per output enables a chain length of 4 & a max shift frequency of 25 MHz [probably])
- Needs also multiple color lookups, for index. Or we can do the lookup while loading the data from sdram
** Power improvement
- Lokal regulation (maybe create a custom pcb, that just plugs into power socket directly)
- LEDs retain same brightness down to ~4V, cuts power consumption by 20% & greatly reduces heat
** Software
For development purposes (https://github.com/enjoy-digital/litex/wiki/Load-Application-Code-To-CPU):
- Load over serial (maybe jtag_uart in the future)
- Afterwards: either embedded rom or spiflash boot
* 210201
** Elaborated improvements
** Added notes about memory splitting
* 210208
** MAC
- ECP5 has a traceid, unique per device (https://www.latticesemi.com/-/media/LatticeSemi/Documents/ApplicationNotes/UZ/UsingTraceID.ashx?document_id=39093)
- Unfortunately only readable via JTAG or sspi (svf hacking, probably D:)
** Art-Net
Only need ArtDMX & ArtSync packets
* 210516
(Also some of it done in the meantime)
** Hub75 output
- Add buffering, so that the text row is read while the previous one gets shifted out
  - Reduces SDRAM by a factor of 8, much faster now
- (Re-)add non-indexed output
- Code cleanup & renaming

* 210517
** Output Code
- Add notes about writing to certain memory locations for displays
- Add some test code for background color toggle
* 210606
** SPI Flash
After discovering that the gateware doesn't build for v6.1, due to the pin not being directly usable, I tried usrmclk that other boards use and that fixed it.
https://github.com/litex-hub/litex-boards/issues/148
PR fixing it:
- https://github.com/litex-hub/litex-boards/pull/223
New memory region listing
#+BEGIN_SRC
litex> mem_list
Available memory regions:
ROM       0x00000000 0x10000
SRAM      0x10000000 0x2000
SPIFLASH  0x80000000 0x200000
MAIN_RAM  0x40000000 0x400000
PALETTE   0x90000000 0x100
ETHMAC    0x80200000 0x2000
CSR       0xf0000000 0x10000
#+END_SRC

*** Read Data with wishbone
~wishbone-tool --csr-csv csr.csv 0x80000000 -u /dev/ttyUSB1 --hexdump~

Maybe add ~--burst-length~ to dump more? (Doesn't work for some reason)

Added ~wb_rom_dump.py~ script to create a backup of the flash
* 210607
** Image init
- Indexed Image & Palette from SDRAM
** Boot from Flash
https://github.com/timvideos/litex-buildenv/wiki/Bare-Metal
