# ! [doc = "Peripheral access API for SOC microcontrollers (generated using svd2rust v0.17.0)\n\nYou can find an overview of the API [here].\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api"]
# ! [deny (const_err)]
# ! [deny (dead_code)]
# ! [deny (improper_ctypes)]
# ! [deny (missing_docs)]
# ! [deny (no_mangle_generic_items)]
# ! [deny (non_shorthand_field_patterns)]
# ! [deny (overflowing_literals)]
# ! [deny (path_statements)]
# ! [deny (patterns_in_fns_without_body)]
# ! [deny (private_in_public)]
# ! [deny (unconditional_recursion)]
# ! [deny (unused_allocation)]
# ! [deny (unused_comparisons)]
# ! [deny (unused_parens)]
# ! [deny (while_true)]
# ! [allow (non_camel_case_types)]
# ! [allow (non_snake_case)]
extern crate riscv ; # [cfg (feature = "rt")]
extern crate riscv_rt ; extern crate bare_metal ; extern crate vcell ; use core :: ops :: Deref ; use core :: marker :: PhantomData ; # [doc (hidden)]
pub mod interrupt { # [doc = r"Enumeration of all the interrupts"]
# [derive (Copy , Clone , Debug)]
# [repr (u8)]
pub enum Interrupt { # [doc = "0 - uart"]
UART = 0 , # [doc = "1 - timer0"]
TIMER0 = 1 , # [doc = "2 - ethmac"]
ETHMAC = 2 , } unsafe impl bare_metal :: Nr for Interrupt { # [inline (always)]
fn nr (& self) -> u8 { * self as u8 } } # [derive (Debug , Copy , Clone)]
pub struct TryFromInterruptError (()) ; impl Interrupt { # [inline]
pub fn try_from (value : u8) -> Result < Self , TryFromInterruptError > { match value { 0 => Ok (Interrupt :: UART) , 1 => Ok (Interrupt :: TIMER0) , 2 => Ok (Interrupt :: ETHMAC) , _ => Err (TryFromInterruptError (())) , } } } # [cfg (feature = "rt")]
# [macro_export]
# [doc = r" Assigns a handler to an interrupt"]
# [doc = r""]
# [doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
# [doc = r" function that will be used as the handler of that interrupt. That function"]
# [doc = r" must have signature `fn()`."]
# [doc = r""]
# [doc = r" Optionally, a third argument may be used to declare interrupt local data."]
# [doc = r" The handler will have exclusive access to these *local* variables on each"]
# [doc = r" invocation. If the third argument is used then the signature of the handler"]
# [doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
# [doc = r" passed to the macro."]
# [doc = r""]
# [doc = r" # Example"]
# [doc = r""]
# [doc = r" ``` ignore"]
# [doc = r" interrupt!(TIM2, periodic);"]
# [doc = r""]
# [doc = r" fn periodic() {"]
# [doc = r#"     print!(".");"#]
# [doc = r" }"]
# [doc = r""]
# [doc = r" interrupt!(TIM3, tick, locals: {"]
# [doc = r"     tick: bool = false;"]
# [doc = r" });"]
# [doc = r""]
# [doc = r" fn tick(locals: &mut TIM3::Locals) {"]
# [doc = r"     locals.tick = !locals.tick;"]
# [doc = r""]
# [doc = r"     if locals.tick {"]
# [doc = r#"         println!("Tick");"#]
# [doc = r"     } else {"]
# [doc = r#"         println!("Tock");"#]
# [doc = r"     }"]
# [doc = r" }"]
# [doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } } } pub use self :: interrupt :: Interrupt ; # [allow (unused_imports)]
use generic :: * ; # [doc = r"Common register and bit access and modify traits"]
pub mod generic { use core :: marker ; # [doc = "This trait shows that register has `read` method"]
# [doc = ""]
# [doc = "Registers marked with `Writable` can be also `modify`'ed"]
pub trait Readable { } # [doc = "This trait shows that register has `write`, `write_with_zero` and `reset` method"]
# [doc = ""]
# [doc = "Registers marked with `Readable` can be also `modify`'ed"]
pub trait Writable { } # [doc = "Reset value of the register"]
# [doc = ""]
# [doc = "This value is initial value for `write` method."]
# [doc = "It can be also directly writed to register by `reset` method."]
pub trait ResetValue { # [doc = "Register size"]
type Type ; # [doc = "Reset value of the register"]
fn reset_value () -> Self :: Type ; } # [doc = "This structure provides volatile access to register"]
pub struct Reg < U , REG > { register : vcell :: VolatileCell < U > , _marker : marker :: PhantomData < REG > , } unsafe impl < U : Send , REG > Send for Reg < U , REG > { } impl < U , REG > Reg < U , REG > where Self : Readable , U : Copy { # [doc = "Reads the contents of `Readable` register"]
# [doc = ""]
# [doc = "You can read the contents of a register in such way:"]
# [doc = "```ignore"]
# [doc = "let bits = periph.reg.read().bits();"]
# [doc = "```"]
# [doc = "or get the content of a particular field of a register."]
# [doc = "```ignore"]
# [doc = "let reader = periph.reg.read();"]
# [doc = "let bits = reader.field1().bits();"]
# [doc = "let flag = reader.field2().bit_is_set();"]
# [doc = "```"]
# [inline (always)]
pub fn read (& self) -> R < U , Self > { R { bits : self . register . get () , _reg : marker :: PhantomData } } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy , { # [doc = "Writes the reset value to `Writable` register"]
# [doc = ""]
# [doc = "Resets the register to its initial state"]
# [inline (always)]
pub fn reset (& self) { self . register . set (Self :: reset_value ()) } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy { # [doc = "Writes bits to `Writable` register"]
# [doc = ""]
# [doc = "You can write raw bits into a register:"]
# [doc = "```ignore"]
# [doc = "periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
# [doc = "```"]
# [doc = "or write only the fields you need:"]
# [doc = "```ignore"]
# [doc = "periph.reg.write(|w| w"]
# [doc = "    .field1().bits(newfield1bits)"]
# [doc = "    .field2().set_bit()"]
# [doc = "    .field3().variant(VARIANT)"]
# [doc = ");"]
# [doc = "```"]
# [doc = "Other fields will have reset value."]
# [inline (always)]
pub fn write < F > (& self , f : F) where F : FnOnce (& mut W < U , Self >) -> & mut W < U , Self > { self . register . set (f (& mut W { bits : Self :: reset_value () , _reg : marker :: PhantomData }) . bits) ; } } impl < U , REG > Reg < U , REG > where Self : Writable , U : Copy + Default { # [doc = "Writes Zero to `Writable` register"]
# [doc = ""]
# [doc = "Similar to `write`, but unused bits will contain 0."]
# [inline (always)]
pub fn write_with_zero < F > (& self , f : F) where F : FnOnce (& mut W < U , Self >) -> & mut W < U , Self > { self . register . set (f (& mut W { bits : U :: default () , _reg : marker :: PhantomData }) . bits) ; } } impl < U , REG > Reg < U , REG > where Self : Readable + Writable , U : Copy , { # [doc = "Modifies the contents of the register"]
# [doc = ""]
# [doc = "E.g. to do a read-modify-write sequence to change parts of a register:"]
# [doc = "```ignore"]
# [doc = "periph.reg.modify(|r, w| unsafe { w.bits("]
# [doc = "   r.bits() | 3"]
# [doc = ") });"]
# [doc = "```"]
# [doc = "or"]
# [doc = "```ignore"]
# [doc = "periph.reg.modify(|_, w| w"]
# [doc = "    .field1().bits(newfield1bits)"]
# [doc = "    .field2().set_bit()"]
# [doc = "    .field3().variant(VARIANT)"]
# [doc = ");"]
# [doc = "```"]
# [doc = "Other fields will have value they had before call `modify`."]
# [inline (always)]
pub fn modify < F > (& self , f : F) where for < 'w > F : FnOnce (& R < U , Self > , & 'w mut W < U , Self >) -> & 'w mut W < U , Self > { let bits = self . register . get () ; self . register . set (f (& R { bits , _reg : marker :: PhantomData } , & mut W { bits , _reg : marker :: PhantomData }) . bits) ; } } # [doc = "Register/field reader"]
# [doc = ""]
# [doc = "Result of the [`read`](Reg::read) method of a register."]
# [doc = "Also it can be used in the [`modify`](Reg::read) method"]
pub struct R < U , T > { pub (crate) bits : U , _reg : marker :: PhantomData < T > , } impl < U , T > R < U , T > where U : Copy { # [doc = "Create new instance of reader"]
# [inline (always)]
pub (crate) fn new (bits : U) -> Self { Self { bits , _reg : marker :: PhantomData , } } # [doc = "Read raw bits from register/field"]
# [inline (always)]
pub fn bits (& self) -> U { self . bits } } impl < U , T , FI > PartialEq < FI > for R < U , T > where U : PartialEq , FI : Copy + Into < U > { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& (* other) . into ()) } } impl < FI > R < bool , FI > { # [doc = "Value of the field as raw bits"]
# [inline (always)]
pub fn bit (& self) -> bool { self . bits } # [doc = "Returns `true` if the bit is clear (0)"]
# [inline (always)]
pub fn bit_is_clear (& self) -> bool { ! self . bit () } # [doc = "Returns `true` if the bit is set (1)"]
# [inline (always)]
pub fn bit_is_set (& self) -> bool { self . bit () } } # [doc = "Register writer"]
# [doc = ""]
# [doc = "Used as an argument to the closures in the [`write`](Reg::write) and [`modify`](Reg::modify) methods of the register"]
pub struct W < U , REG > { # [doc = "Writable bits"]
pub (crate) bits : U , _reg : marker :: PhantomData < REG > , } impl < U , REG > W < U , REG > { # [doc = "Writes raw bits to the register"]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : U) -> & mut Self { self . bits = bits ; self } } # [doc = "Used if enumerated values cover not the whole range"]
# [derive (Clone , Copy , PartialEq)]
pub enum Variant < U , T > { # [doc = "Expected variant"]
Val (T) , # [doc = "Raw bits"]
Res (U) , } } # [doc = "SPIFLASH_MMAP"]
pub struct SPIFLASH_MMAP { _marker : PhantomData < * const () > } unsafe impl Send for SPIFLASH_MMAP { } impl SPIFLASH_MMAP { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const spiflash_mmap :: RegisterBlock { 0xf000_0000 as * const _ } } impl Deref for SPIFLASH_MMAP { type Target = spiflash_mmap :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * SPIFLASH_MMAP :: ptr () } } } # [doc = "SPIFLASH_MMAP"]
pub mod spiflash_mmap { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub sys_clk_freq : SYS_CLK_FREQ , # [doc = "0x04 - "]
pub master_cs : MASTER_CS , # [doc = "0x08 - SPI PHY settings."]
pub master_phyconfig : MASTER_PHYCONFIG , # [doc = "0x0c - "]
pub master_rxtx : MASTER_RXTX , # [doc = "0x10 - "]
pub master_status : MASTER_STATUS , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sys_clk_freq](sys_clk_freq) module"]
pub type SYS_CLK_FREQ = crate :: Reg < u32 , _SYS_CLK_FREQ > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SYS_CLK_FREQ ; # [doc = "`read()` method returns [sys_clk_freq::R](sys_clk_freq::R) reader structure"]
impl crate :: Readable for SYS_CLK_FREQ { } # [doc = "`write(|w| ..)` method takes [sys_clk_freq::W](sys_clk_freq::W) writer structure"]
impl crate :: Writable for SYS_CLK_FREQ { } # [doc = ""]
pub mod sys_clk_freq { # [doc = "Reader of register SYS_CLK_FREQ"]
pub type R = crate :: R < u32 , super :: SYS_CLK_FREQ > ; # [doc = "Writer for register SYS_CLK_FREQ"]
pub type W = crate :: W < u32 , super :: SYS_CLK_FREQ > ; # [doc = "Register SYS_CLK_FREQ `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SYS_CLK_FREQ { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sys_clk_freq`"]
pub type SYS_CLK_FREQ_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `sys_clk_freq`"]
pub struct SYS_CLK_FREQ_W < 'a > { w : & 'a mut W , } impl < 'a > SYS_CLK_FREQ_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sys_clk_freq (& self) -> SYS_CLK_FREQ_R { SYS_CLK_FREQ_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sys_clk_freq (& mut self) -> SYS_CLK_FREQ_W { SYS_CLK_FREQ_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [master_cs](master_cs) module"]
pub type MASTER_CS = crate :: Reg < u32 , _MASTER_CS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MASTER_CS ; # [doc = "`read()` method returns [master_cs::R](master_cs::R) reader structure"]
impl crate :: Readable for MASTER_CS { } # [doc = "`write(|w| ..)` method takes [master_cs::W](master_cs::W) writer structure"]
impl crate :: Writable for MASTER_CS { } # [doc = ""]
pub mod master_cs { # [doc = "Reader of register MASTER_CS"]
pub type R = crate :: R < u32 , super :: MASTER_CS > ; # [doc = "Writer for register MASTER_CS"]
pub type W = crate :: W < u32 , super :: MASTER_CS > ; # [doc = "Register MASTER_CS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MASTER_CS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `master_cs`"]
pub type MASTER_CS_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `master_cs`"]
pub struct MASTER_CS_W < 'a > { w : & 'a mut W , } impl < 'a > MASTER_CS_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn master_cs (& self) -> MASTER_CS_R { MASTER_CS_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn master_cs (& mut self) -> MASTER_CS_W { MASTER_CS_W { w : self } } } } # [doc = "SPI PHY settings.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [master_phyconfig](master_phyconfig) module"]
pub type MASTER_PHYCONFIG = crate :: Reg < u32 , _MASTER_PHYCONFIG > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MASTER_PHYCONFIG ; # [doc = "`read()` method returns [master_phyconfig::R](master_phyconfig::R) reader structure"]
impl crate :: Readable for MASTER_PHYCONFIG { } # [doc = "`write(|w| ..)` method takes [master_phyconfig::W](master_phyconfig::W) writer structure"]
impl crate :: Writable for MASTER_PHYCONFIG { } # [doc = "SPI PHY settings."]
pub mod master_phyconfig { # [doc = "Reader of register MASTER_PHYCONFIG"]
pub type R = crate :: R < u32 , super :: MASTER_PHYCONFIG > ; # [doc = "Writer for register MASTER_PHYCONFIG"]
pub type W = crate :: W < u32 , super :: MASTER_PHYCONFIG > ; # [doc = "Register MASTER_PHYCONFIG `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MASTER_PHYCONFIG { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `len`"]
pub type LEN_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `len`"]
pub struct LEN_W < 'a > { w : & 'a mut W , } impl < 'a > LEN_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `width`"]
pub type WIDTH_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `width`"]
pub struct WIDTH_W < 'a > { w : & 'a mut W , } impl < 'a > WIDTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x0f << 8)) | (((value as u32) & 0x0f) << 8) ; self . w } } # [doc = "Reader of field `mask`"]
pub type MASK_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `mask`"]
pub struct MASK_W < 'a > { w : & 'a mut W , } impl < 'a > MASK_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 16)) | (((value as u32) & 0xff) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn len (& self) -> LEN_R { LEN_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:11 - SPI Xfer width (1/2/4/8)."]
# [inline (always)]
pub fn width (& self) -> WIDTH_R { WIDTH_R :: new (((self . bits >> 8) & 0x0f) as u8) } # [doc = "Bits 16:23 - SPI DQ output enable mask (set bits to ``1`` to enable output drivers on DQ lines)."]
# [inline (always)]
pub fn mask (& self) -> MASK_R { MASK_R :: new (((self . bits >> 16) & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn len (& mut self) -> LEN_W { LEN_W { w : self } } # [doc = "Bits 8:11 - SPI Xfer width (1/2/4/8)."]
# [inline (always)]
pub fn width (& mut self) -> WIDTH_W { WIDTH_W { w : self } } # [doc = "Bits 16:23 - SPI DQ output enable mask (set bits to ``1`` to enable output drivers on DQ lines)."]
# [inline (always)]
pub fn mask (& mut self) -> MASK_W { MASK_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [master_rxtx](master_rxtx) module"]
pub type MASTER_RXTX = crate :: Reg < u32 , _MASTER_RXTX > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MASTER_RXTX ; # [doc = "`read()` method returns [master_rxtx::R](master_rxtx::R) reader structure"]
impl crate :: Readable for MASTER_RXTX { } # [doc = "`write(|w| ..)` method takes [master_rxtx::W](master_rxtx::W) writer structure"]
impl crate :: Writable for MASTER_RXTX { } # [doc = ""]
pub mod master_rxtx { # [doc = "Reader of register MASTER_RXTX"]
pub type R = crate :: R < u32 , super :: MASTER_RXTX > ; # [doc = "Writer for register MASTER_RXTX"]
pub type W = crate :: W < u32 , super :: MASTER_RXTX > ; # [doc = "Register MASTER_RXTX `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MASTER_RXTX { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `master_rxtx`"]
pub type MASTER_RXTX_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `master_rxtx`"]
pub struct MASTER_RXTX_W < 'a > { w : & 'a mut W , } impl < 'a > MASTER_RXTX_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn master_rxtx (& self) -> MASTER_RXTX_R { MASTER_RXTX_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn master_rxtx (& mut self) -> MASTER_RXTX_W { MASTER_RXTX_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [master_status](master_status) module"]
pub type MASTER_STATUS = crate :: Reg < u32 , _MASTER_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MASTER_STATUS ; # [doc = "`read()` method returns [master_status::R](master_status::R) reader structure"]
impl crate :: Readable for MASTER_STATUS { } # [doc = "`write(|w| ..)` method takes [master_status::W](master_status::W) writer structure"]
impl crate :: Writable for MASTER_STATUS { } # [doc = ""]
pub mod master_status { # [doc = "Reader of register MASTER_STATUS"]
pub type R = crate :: R < u32 , super :: MASTER_STATUS > ; # [doc = "Writer for register MASTER_STATUS"]
pub type W = crate :: W < u32 , super :: MASTER_STATUS > ; # [doc = "Register MASTER_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MASTER_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx_ready`"]
pub type TX_READY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx_ready`"]
pub struct TX_READY_W < 'a > { w : & 'a mut W , } impl < 'a > TX_READY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx_ready`"]
pub type RX_READY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx_ready`"]
pub struct RX_READY_W < 'a > { w : & 'a mut W , } impl < 'a > RX_READY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - TX FIFO is not full."]
# [inline (always)]
pub fn tx_ready (& self) -> TX_READY_R { TX_READY_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - RX FIFO is not empty."]
# [inline (always)]
pub fn rx_ready (& self) -> RX_READY_R { RX_READY_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - TX FIFO is not full."]
# [inline (always)]
pub fn tx_ready (& mut self) -> TX_READY_W { TX_READY_W { w : self } } # [doc = "Bit 1 - RX FIFO is not empty."]
# [inline (always)]
pub fn rx_ready (& mut self) -> RX_READY_W { RX_READY_W { w : self } } } } } # [doc = "SPIFLASH_PHY"]
pub struct SPIFLASH_PHY { _marker : PhantomData < * const () > } unsafe impl Send for SPIFLASH_PHY { } impl SPIFLASH_PHY { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const spiflash_phy :: RegisterBlock { 0xf000_0800 as * const _ } } impl Deref for SPIFLASH_PHY { type Target = spiflash_phy :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * SPIFLASH_PHY :: ptr () } } } # [doc = "SPIFLASH_PHY"]
pub mod spiflash_phy { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub clk_divisor : CLK_DIVISOR , # [doc = "0x04 - "]
pub dummy_bits : DUMMY_BITS , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk_divisor](clk_divisor) module"]
pub type CLK_DIVISOR = crate :: Reg < u32 , _CLK_DIVISOR > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CLK_DIVISOR ; # [doc = "`read()` method returns [clk_divisor::R](clk_divisor::R) reader structure"]
impl crate :: Readable for CLK_DIVISOR { } # [doc = "`write(|w| ..)` method takes [clk_divisor::W](clk_divisor::W) writer structure"]
impl crate :: Writable for CLK_DIVISOR { } # [doc = ""]
pub mod clk_divisor { # [doc = "Reader of register CLK_DIVISOR"]
pub type R = crate :: R < u32 , super :: CLK_DIVISOR > ; # [doc = "Writer for register CLK_DIVISOR"]
pub type W = crate :: W < u32 , super :: CLK_DIVISOR > ; # [doc = "Register CLK_DIVISOR `reset()`'s with value 0x09"]
impl crate :: ResetValue for super :: CLK_DIVISOR { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x09 } } # [doc = "Reader of field `clk_divisor`"]
pub type CLK_DIVISOR_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `clk_divisor`"]
pub struct CLK_DIVISOR_W < 'a > { w : & 'a mut W , } impl < 'a > CLK_DIVISOR_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn clk_divisor (& self) -> CLK_DIVISOR_R { CLK_DIVISOR_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn clk_divisor (& mut self) -> CLK_DIVISOR_W { CLK_DIVISOR_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dummy_bits](dummy_bits) module"]
pub type DUMMY_BITS = crate :: Reg < u32 , _DUMMY_BITS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DUMMY_BITS ; # [doc = "`read()` method returns [dummy_bits::R](dummy_bits::R) reader structure"]
impl crate :: Readable for DUMMY_BITS { } # [doc = "`write(|w| ..)` method takes [dummy_bits::W](dummy_bits::W) writer structure"]
impl crate :: Writable for DUMMY_BITS { } # [doc = ""]
pub mod dummy_bits { # [doc = "Reader of register DUMMY_BITS"]
pub type R = crate :: R < u32 , super :: DUMMY_BITS > ; # [doc = "Writer for register DUMMY_BITS"]
pub type W = crate :: W < u32 , super :: DUMMY_BITS > ; # [doc = "Register DUMMY_BITS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DUMMY_BITS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dummy_bits`"]
pub type DUMMY_BITS_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `dummy_bits`"]
pub struct DUMMY_BITS_W < 'a > { w : & 'a mut W , } impl < 'a > DUMMY_BITS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn dummy_bits (& self) -> DUMMY_BITS_R { DUMMY_BITS_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn dummy_bits (& mut self) -> DUMMY_BITS_W { DUMMY_BITS_W { w : self } } } } } # [doc = "CTRL"]
pub struct CTRL { _marker : PhantomData < * const () > } unsafe impl Send for CTRL { } impl CTRL { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ctrl :: RegisterBlock { 0xf000_1000 as * const _ } } impl Deref for CTRL { type Target = ctrl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * CTRL :: ptr () } } } # [doc = "CTRL"]
pub mod ctrl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub reset : RESET , # [doc = "0x04 - Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub scratch : SCRATCH , # [doc = "0x08 - Total number of Wishbone bus errors (timeouts) since start."]
pub bus_errors : BUS_ERRORS , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reset](reset) module"]
pub type RESET = crate :: Reg < u32 , _RESET > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RESET ; # [doc = "`read()` method returns [reset::R](reset::R) reader structure"]
impl crate :: Readable for RESET { } # [doc = "`write(|w| ..)` method takes [reset::W](reset::W) writer structure"]
impl crate :: Writable for RESET { } # [doc = ""]
pub mod reset { # [doc = "Reader of register RESET"]
pub type R = crate :: R < u32 , super :: RESET > ; # [doc = "Writer for register RESET"]
pub type W = crate :: W < u32 , super :: RESET > ; # [doc = "Register RESET `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RESET { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `soc_rst`"]
pub type SOC_RST_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `soc_rst`"]
pub struct SOC_RST_W < 'a > { w : & 'a mut W , } impl < 'a > SOC_RST_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `cpu_rst`"]
pub type CPU_RST_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `cpu_rst`"]
pub struct CPU_RST_W < 'a > { w : & 'a mut W , } impl < 'a > CPU_RST_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - Write `1` to this register to reset the full SoC (Pulse Reset)"]
# [inline (always)]
pub fn soc_rst (& self) -> SOC_RST_R { SOC_RST_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
# [inline (always)]
pub fn cpu_rst (& self) -> CPU_RST_R { CPU_RST_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write `1` to this register to reset the full SoC (Pulse Reset)"]
# [inline (always)]
pub fn soc_rst (& mut self) -> SOC_RST_W { SOC_RST_W { w : self } } # [doc = "Bit 1 - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
# [inline (always)]
pub fn cpu_rst (& mut self) -> CPU_RST_W { CPU_RST_W { w : self } } } } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scratch](scratch) module"]
pub type SCRATCH = crate :: Reg < u32 , _SCRATCH > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SCRATCH ; # [doc = "`read()` method returns [scratch::R](scratch::R) reader structure"]
impl crate :: Readable for SCRATCH { } # [doc = "`write(|w| ..)` method takes [scratch::W](scratch::W) writer structure"]
impl crate :: Writable for SCRATCH { } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub mod scratch { # [doc = "Reader of register SCRATCH"]
pub type R = crate :: R < u32 , super :: SCRATCH > ; # [doc = "Writer for register SCRATCH"]
pub type W = crate :: W < u32 , super :: SCRATCH > ; # [doc = "Register SCRATCH `reset()`'s with value 0x1234_5678"]
impl crate :: ResetValue for super :: SCRATCH { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x1234_5678 } } # [doc = "Reader of field `scratch`"]
pub type SCRATCH_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `scratch`"]
pub struct SCRATCH_W < 'a > { w : & 'a mut W , } impl < 'a > SCRATCH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& self) -> SCRATCH_R { SCRATCH_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& mut self) -> SCRATCH_W { SCRATCH_W { w : self } } } } # [doc = "Total number of Wishbone bus errors (timeouts) since start.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bus_errors](bus_errors) module"]
pub type BUS_ERRORS = crate :: Reg < u32 , _BUS_ERRORS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _BUS_ERRORS ; # [doc = "`read()` method returns [bus_errors::R](bus_errors::R) reader structure"]
impl crate :: Readable for BUS_ERRORS { } # [doc = "`write(|w| ..)` method takes [bus_errors::W](bus_errors::W) writer structure"]
impl crate :: Writable for BUS_ERRORS { } # [doc = "Total number of Wishbone bus errors (timeouts) since start."]
pub mod bus_errors { # [doc = "Reader of register BUS_ERRORS"]
pub type R = crate :: R < u32 , super :: BUS_ERRORS > ; # [doc = "Writer for register BUS_ERRORS"]
pub type W = crate :: W < u32 , super :: BUS_ERRORS > ; # [doc = "Register BUS_ERRORS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: BUS_ERRORS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `bus_errors`"]
pub type BUS_ERRORS_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `bus_errors`"]
pub struct BUS_ERRORS_W < 'a > { w : & 'a mut W , } impl < 'a > BUS_ERRORS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& self) -> BUS_ERRORS_R { BUS_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& mut self) -> BUS_ERRORS_W { BUS_ERRORS_W { w : self } } } } } # [doc = "ETHMAC"]
pub struct ETHMAC { _marker : PhantomData < * const () > } unsafe impl Send for ETHMAC { } impl ETHMAC { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ethmac :: RegisterBlock { 0xf000_1800 as * const _ } } impl Deref for ETHMAC { type Target = ethmac :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * ETHMAC :: ptr () } } } # [doc = "ETHMAC"]
pub mod ethmac { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub sram_writer_slot : SRAM_WRITER_SLOT , # [doc = "0x04 - "]
pub sram_writer_length : SRAM_WRITER_LENGTH , # [doc = "0x08 - "]
pub sram_writer_errors : SRAM_WRITER_ERRORS , # [doc = "0x0c - This register contains the current raw level of the available event trigger. Writes to this register have no effect."]
pub sram_writer_ev_status : SRAM_WRITER_EV_STATUS , # [doc = "0x10 - When a available event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub sram_writer_ev_pending : SRAM_WRITER_EV_PENDING , # [doc = "0x14 - This register enables the corresponding available events. Write a ``0`` to this register to disable individual events."]
pub sram_writer_ev_enable : SRAM_WRITER_EV_ENABLE , # [doc = "0x18 - "]
pub sram_reader_start : SRAM_READER_START , # [doc = "0x1c - "]
pub sram_reader_ready : SRAM_READER_READY , # [doc = "0x20 - "]
pub sram_reader_level : SRAM_READER_LEVEL , # [doc = "0x24 - "]
pub sram_reader_slot : SRAM_READER_SLOT , # [doc = "0x28 - "]
pub sram_reader_length : SRAM_READER_LENGTH , # [doc = "0x2c - This register contains the current raw level of the event0 event trigger. Writes to this register have no effect."]
pub sram_reader_ev_status : SRAM_READER_EV_STATUS , # [doc = "0x30 - When a event0 event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub sram_reader_ev_pending : SRAM_READER_EV_PENDING , # [doc = "0x34 - This register enables the corresponding event0 events. Write a ``0`` to this register to disable individual events."]
pub sram_reader_ev_enable : SRAM_READER_EV_ENABLE , # [doc = "0x38 - "]
pub preamble_crc : PREAMBLE_CRC , # [doc = "0x3c - "]
pub preamble_errors : PREAMBLE_ERRORS , # [doc = "0x40 - "]
pub crc_errors : CRC_ERRORS , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_slot](sram_writer_slot) module"]
pub type SRAM_WRITER_SLOT = crate :: Reg < u32 , _SRAM_WRITER_SLOT > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_SLOT ; # [doc = "`read()` method returns [sram_writer_slot::R](sram_writer_slot::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_SLOT { } # [doc = "`write(|w| ..)` method takes [sram_writer_slot::W](sram_writer_slot::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_SLOT { } # [doc = ""]
pub mod sram_writer_slot { # [doc = "Reader of register SRAM_WRITER_SLOT"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_SLOT > ; # [doc = "Writer for register SRAM_WRITER_SLOT"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_SLOT > ; # [doc = "Register SRAM_WRITER_SLOT `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_SLOT { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_writer_slot`"]
pub type SRAM_WRITER_SLOT_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sram_writer_slot`"]
pub struct SRAM_WRITER_SLOT_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_WRITER_SLOT_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_writer_slot (& self) -> SRAM_WRITER_SLOT_R { SRAM_WRITER_SLOT_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_writer_slot (& mut self) -> SRAM_WRITER_SLOT_W { SRAM_WRITER_SLOT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_length](sram_writer_length) module"]
pub type SRAM_WRITER_LENGTH = crate :: Reg < u32 , _SRAM_WRITER_LENGTH > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_LENGTH ; # [doc = "`read()` method returns [sram_writer_length::R](sram_writer_length::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_LENGTH { } # [doc = "`write(|w| ..)` method takes [sram_writer_length::W](sram_writer_length::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_LENGTH { } # [doc = ""]
pub mod sram_writer_length { # [doc = "Reader of register SRAM_WRITER_LENGTH"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_LENGTH > ; # [doc = "Writer for register SRAM_WRITER_LENGTH"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_LENGTH > ; # [doc = "Register SRAM_WRITER_LENGTH `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_LENGTH { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_writer_length`"]
pub type SRAM_WRITER_LENGTH_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `sram_writer_length`"]
pub struct SRAM_WRITER_LENGTH_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_WRITER_LENGTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sram_writer_length (& self) -> SRAM_WRITER_LENGTH_R { SRAM_WRITER_LENGTH_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sram_writer_length (& mut self) -> SRAM_WRITER_LENGTH_W { SRAM_WRITER_LENGTH_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_errors](sram_writer_errors) module"]
pub type SRAM_WRITER_ERRORS = crate :: Reg < u32 , _SRAM_WRITER_ERRORS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_ERRORS ; # [doc = "`read()` method returns [sram_writer_errors::R](sram_writer_errors::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_ERRORS { } # [doc = "`write(|w| ..)` method takes [sram_writer_errors::W](sram_writer_errors::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_ERRORS { } # [doc = ""]
pub mod sram_writer_errors { # [doc = "Reader of register SRAM_WRITER_ERRORS"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_ERRORS > ; # [doc = "Writer for register SRAM_WRITER_ERRORS"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_ERRORS > ; # [doc = "Register SRAM_WRITER_ERRORS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_ERRORS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_writer_errors`"]
pub type SRAM_WRITER_ERRORS_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `sram_writer_errors`"]
pub struct SRAM_WRITER_ERRORS_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_WRITER_ERRORS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sram_writer_errors (& self) -> SRAM_WRITER_ERRORS_R { SRAM_WRITER_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn sram_writer_errors (& mut self) -> SRAM_WRITER_ERRORS_W { SRAM_WRITER_ERRORS_W { w : self } } } } # [doc = "This register contains the current raw level of the available event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_ev_status](sram_writer_ev_status) module"]
pub type SRAM_WRITER_EV_STATUS = crate :: Reg < u32 , _SRAM_WRITER_EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_EV_STATUS ; # [doc = "`read()` method returns [sram_writer_ev_status::R](sram_writer_ev_status::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_EV_STATUS { } # [doc = "`write(|w| ..)` method takes [sram_writer_ev_status::W](sram_writer_ev_status::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_EV_STATUS { } # [doc = "This register contains the current raw level of the available event trigger. Writes to this register have no effect."]
pub mod sram_writer_ev_status { # [doc = "Reader of register SRAM_WRITER_EV_STATUS"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_EV_STATUS > ; # [doc = "Writer for register SRAM_WRITER_EV_STATUS"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_EV_STATUS > ; # [doc = "Register SRAM_WRITER_EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `available`"]
pub type AVAILABLE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `available`"]
pub struct AVAILABLE_W < 'a > { w : & 'a mut W , } impl < 'a > AVAILABLE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``available`` event"]
# [inline (always)]
pub fn available (& self) -> AVAILABLE_R { AVAILABLE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``available`` event"]
# [inline (always)]
pub fn available (& mut self) -> AVAILABLE_W { AVAILABLE_W { w : self } } } } # [doc = "When a available event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_ev_pending](sram_writer_ev_pending) module"]
pub type SRAM_WRITER_EV_PENDING = crate :: Reg < u32 , _SRAM_WRITER_EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_EV_PENDING ; # [doc = "`read()` method returns [sram_writer_ev_pending::R](sram_writer_ev_pending::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_EV_PENDING { } # [doc = "`write(|w| ..)` method takes [sram_writer_ev_pending::W](sram_writer_ev_pending::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_EV_PENDING { } # [doc = "When a available event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod sram_writer_ev_pending { # [doc = "Reader of register SRAM_WRITER_EV_PENDING"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_EV_PENDING > ; # [doc = "Writer for register SRAM_WRITER_EV_PENDING"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_EV_PENDING > ; # [doc = "Register SRAM_WRITER_EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `available`"]
pub type AVAILABLE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `available`"]
pub struct AVAILABLE_W < 'a > { w : & 'a mut W , } impl < 'a > AVAILABLE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a `available` event occurred. This Event is **level triggered** when the signal is **high**."]
# [inline (always)]
pub fn available (& self) -> AVAILABLE_R { AVAILABLE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `available` event occurred. This Event is **level triggered** when the signal is **high**."]
# [inline (always)]
pub fn available (& mut self) -> AVAILABLE_W { AVAILABLE_W { w : self } } } } # [doc = "This register enables the corresponding available events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_writer_ev_enable](sram_writer_ev_enable) module"]
pub type SRAM_WRITER_EV_ENABLE = crate :: Reg < u32 , _SRAM_WRITER_EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_WRITER_EV_ENABLE ; # [doc = "`read()` method returns [sram_writer_ev_enable::R](sram_writer_ev_enable::R) reader structure"]
impl crate :: Readable for SRAM_WRITER_EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [sram_writer_ev_enable::W](sram_writer_ev_enable::W) writer structure"]
impl crate :: Writable for SRAM_WRITER_EV_ENABLE { } # [doc = "This register enables the corresponding available events. Write a ``0`` to this register to disable individual events."]
pub mod sram_writer_ev_enable { # [doc = "Reader of register SRAM_WRITER_EV_ENABLE"]
pub type R = crate :: R < u32 , super :: SRAM_WRITER_EV_ENABLE > ; # [doc = "Writer for register SRAM_WRITER_EV_ENABLE"]
pub type W = crate :: W < u32 , super :: SRAM_WRITER_EV_ENABLE > ; # [doc = "Register SRAM_WRITER_EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_WRITER_EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `available`"]
pub type AVAILABLE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `available`"]
pub struct AVAILABLE_W < 'a > { w : & 'a mut W , } impl < 'a > AVAILABLE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``available`` Event"]
# [inline (always)]
pub fn available (& self) -> AVAILABLE_R { AVAILABLE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``available`` Event"]
# [inline (always)]
pub fn available (& mut self) -> AVAILABLE_W { AVAILABLE_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_start](sram_reader_start) module"]
pub type SRAM_READER_START = crate :: Reg < u32 , _SRAM_READER_START > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_START ; # [doc = "`read()` method returns [sram_reader_start::R](sram_reader_start::R) reader structure"]
impl crate :: Readable for SRAM_READER_START { } # [doc = "`write(|w| ..)` method takes [sram_reader_start::W](sram_reader_start::W) writer structure"]
impl crate :: Writable for SRAM_READER_START { } # [doc = ""]
pub mod sram_reader_start { # [doc = "Reader of register SRAM_READER_START"]
pub type R = crate :: R < u32 , super :: SRAM_READER_START > ; # [doc = "Writer for register SRAM_READER_START"]
pub type W = crate :: W < u32 , super :: SRAM_READER_START > ; # [doc = "Register SRAM_READER_START `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_START { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_reader_start`"]
pub type SRAM_READER_START_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sram_reader_start`"]
pub struct SRAM_READER_START_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_READER_START_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_start (& self) -> SRAM_READER_START_R { SRAM_READER_START_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_start (& mut self) -> SRAM_READER_START_W { SRAM_READER_START_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_ready](sram_reader_ready) module"]
pub type SRAM_READER_READY = crate :: Reg < u32 , _SRAM_READER_READY > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_READY ; # [doc = "`read()` method returns [sram_reader_ready::R](sram_reader_ready::R) reader structure"]
impl crate :: Readable for SRAM_READER_READY { } # [doc = "`write(|w| ..)` method takes [sram_reader_ready::W](sram_reader_ready::W) writer structure"]
impl crate :: Writable for SRAM_READER_READY { } # [doc = ""]
pub mod sram_reader_ready { # [doc = "Reader of register SRAM_READER_READY"]
pub type R = crate :: R < u32 , super :: SRAM_READER_READY > ; # [doc = "Writer for register SRAM_READER_READY"]
pub type W = crate :: W < u32 , super :: SRAM_READER_READY > ; # [doc = "Register SRAM_READER_READY `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_READY { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_reader_ready`"]
pub type SRAM_READER_READY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sram_reader_ready`"]
pub struct SRAM_READER_READY_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_READER_READY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_ready (& self) -> SRAM_READER_READY_R { SRAM_READER_READY_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_ready (& mut self) -> SRAM_READER_READY_W { SRAM_READER_READY_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_level](sram_reader_level) module"]
pub type SRAM_READER_LEVEL = crate :: Reg < u32 , _SRAM_READER_LEVEL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_LEVEL ; # [doc = "`read()` method returns [sram_reader_level::R](sram_reader_level::R) reader structure"]
impl crate :: Readable for SRAM_READER_LEVEL { } # [doc = "`write(|w| ..)` method takes [sram_reader_level::W](sram_reader_level::W) writer structure"]
impl crate :: Writable for SRAM_READER_LEVEL { } # [doc = ""]
pub mod sram_reader_level { # [doc = "Reader of register SRAM_READER_LEVEL"]
pub type R = crate :: R < u32 , super :: SRAM_READER_LEVEL > ; # [doc = "Writer for register SRAM_READER_LEVEL"]
pub type W = crate :: W < u32 , super :: SRAM_READER_LEVEL > ; # [doc = "Register SRAM_READER_LEVEL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_LEVEL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_reader_level`"]
pub type SRAM_READER_LEVEL_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `sram_reader_level`"]
pub struct SRAM_READER_LEVEL_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_READER_LEVEL_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn sram_reader_level (& self) -> SRAM_READER_LEVEL_R { SRAM_READER_LEVEL_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn sram_reader_level (& mut self) -> SRAM_READER_LEVEL_W { SRAM_READER_LEVEL_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_slot](sram_reader_slot) module"]
pub type SRAM_READER_SLOT = crate :: Reg < u32 , _SRAM_READER_SLOT > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_SLOT ; # [doc = "`read()` method returns [sram_reader_slot::R](sram_reader_slot::R) reader structure"]
impl crate :: Readable for SRAM_READER_SLOT { } # [doc = "`write(|w| ..)` method takes [sram_reader_slot::W](sram_reader_slot::W) writer structure"]
impl crate :: Writable for SRAM_READER_SLOT { } # [doc = ""]
pub mod sram_reader_slot { # [doc = "Reader of register SRAM_READER_SLOT"]
pub type R = crate :: R < u32 , super :: SRAM_READER_SLOT > ; # [doc = "Writer for register SRAM_READER_SLOT"]
pub type W = crate :: W < u32 , super :: SRAM_READER_SLOT > ; # [doc = "Register SRAM_READER_SLOT `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_SLOT { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_reader_slot`"]
pub type SRAM_READER_SLOT_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sram_reader_slot`"]
pub struct SRAM_READER_SLOT_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_READER_SLOT_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_slot (& self) -> SRAM_READER_SLOT_R { SRAM_READER_SLOT_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn sram_reader_slot (& mut self) -> SRAM_READER_SLOT_W { SRAM_READER_SLOT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_length](sram_reader_length) module"]
pub type SRAM_READER_LENGTH = crate :: Reg < u32 , _SRAM_READER_LENGTH > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_LENGTH ; # [doc = "`read()` method returns [sram_reader_length::R](sram_reader_length::R) reader structure"]
impl crate :: Readable for SRAM_READER_LENGTH { } # [doc = "`write(|w| ..)` method takes [sram_reader_length::W](sram_reader_length::W) writer structure"]
impl crate :: Writable for SRAM_READER_LENGTH { } # [doc = ""]
pub mod sram_reader_length { # [doc = "Reader of register SRAM_READER_LENGTH"]
pub type R = crate :: R < u32 , super :: SRAM_READER_LENGTH > ; # [doc = "Writer for register SRAM_READER_LENGTH"]
pub type W = crate :: W < u32 , super :: SRAM_READER_LENGTH > ; # [doc = "Register SRAM_READER_LENGTH `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_LENGTH { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `sram_reader_length`"]
pub type SRAM_READER_LENGTH_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `sram_reader_length`"]
pub struct SRAM_READER_LENGTH_W < 'a > { w : & 'a mut W , } impl < 'a > SRAM_READER_LENGTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x07ff) | ((value as u32) & 0x07ff) ; self . w } } impl R { # [doc = "Bits 0:10"]
# [inline (always)]
pub fn sram_reader_length (& self) -> SRAM_READER_LENGTH_R { SRAM_READER_LENGTH_R :: new ((self . bits & 0x07ff) as u16) } } impl W { # [doc = "Bits 0:10"]
# [inline (always)]
pub fn sram_reader_length (& mut self) -> SRAM_READER_LENGTH_W { SRAM_READER_LENGTH_W { w : self } } } } # [doc = "This register contains the current raw level of the event0 event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_ev_status](sram_reader_ev_status) module"]
pub type SRAM_READER_EV_STATUS = crate :: Reg < u32 , _SRAM_READER_EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_EV_STATUS ; # [doc = "`read()` method returns [sram_reader_ev_status::R](sram_reader_ev_status::R) reader structure"]
impl crate :: Readable for SRAM_READER_EV_STATUS { } # [doc = "`write(|w| ..)` method takes [sram_reader_ev_status::W](sram_reader_ev_status::W) writer structure"]
impl crate :: Writable for SRAM_READER_EV_STATUS { } # [doc = "This register contains the current raw level of the event0 event trigger. Writes to this register have no effect."]
pub mod sram_reader_ev_status { # [doc = "Reader of register SRAM_READER_EV_STATUS"]
pub type R = crate :: R < u32 , super :: SRAM_READER_EV_STATUS > ; # [doc = "Writer for register SRAM_READER_EV_STATUS"]
pub type W = crate :: W < u32 , super :: SRAM_READER_EV_STATUS > ; # [doc = "Register SRAM_READER_EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `event0`"]
pub type EVENT0_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `event0`"]
pub struct EVENT0_W < 'a > { w : & 'a mut W , } impl < 'a > EVENT0_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``event0`` event"]
# [inline (always)]
pub fn event0 (& self) -> EVENT0_R { EVENT0_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``event0`` event"]
# [inline (always)]
pub fn event0 (& mut self) -> EVENT0_W { EVENT0_W { w : self } } } } # [doc = "When a event0 event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_ev_pending](sram_reader_ev_pending) module"]
pub type SRAM_READER_EV_PENDING = crate :: Reg < u32 , _SRAM_READER_EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_EV_PENDING ; # [doc = "`read()` method returns [sram_reader_ev_pending::R](sram_reader_ev_pending::R) reader structure"]
impl crate :: Readable for SRAM_READER_EV_PENDING { } # [doc = "`write(|w| ..)` method takes [sram_reader_ev_pending::W](sram_reader_ev_pending::W) writer structure"]
impl crate :: Writable for SRAM_READER_EV_PENDING { } # [doc = "When a event0 event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod sram_reader_ev_pending { # [doc = "Reader of register SRAM_READER_EV_PENDING"]
pub type R = crate :: R < u32 , super :: SRAM_READER_EV_PENDING > ; # [doc = "Writer for register SRAM_READER_EV_PENDING"]
pub type W = crate :: W < u32 , super :: SRAM_READER_EV_PENDING > ; # [doc = "Register SRAM_READER_EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `event0`"]
pub type EVENT0_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `event0`"]
pub struct EVENT0_W < 'a > { w : & 'a mut W , } impl < 'a > EVENT0_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a this particular event occurred. This Event is triggered on a **rising** edge."]
# [inline (always)]
pub fn event0 (& self) -> EVENT0_R { EVENT0_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a this particular event occurred. This Event is triggered on a **rising** edge."]
# [inline (always)]
pub fn event0 (& mut self) -> EVENT0_W { EVENT0_W { w : self } } } } # [doc = "This register enables the corresponding event0 events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sram_reader_ev_enable](sram_reader_ev_enable) module"]
pub type SRAM_READER_EV_ENABLE = crate :: Reg < u32 , _SRAM_READER_EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SRAM_READER_EV_ENABLE ; # [doc = "`read()` method returns [sram_reader_ev_enable::R](sram_reader_ev_enable::R) reader structure"]
impl crate :: Readable for SRAM_READER_EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [sram_reader_ev_enable::W](sram_reader_ev_enable::W) writer structure"]
impl crate :: Writable for SRAM_READER_EV_ENABLE { } # [doc = "This register enables the corresponding event0 events. Write a ``0`` to this register to disable individual events."]
pub mod sram_reader_ev_enable { # [doc = "Reader of register SRAM_READER_EV_ENABLE"]
pub type R = crate :: R < u32 , super :: SRAM_READER_EV_ENABLE > ; # [doc = "Writer for register SRAM_READER_EV_ENABLE"]
pub type W = crate :: W < u32 , super :: SRAM_READER_EV_ENABLE > ; # [doc = "Register SRAM_READER_EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SRAM_READER_EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `event0`"]
pub type EVENT0_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `event0`"]
pub struct EVENT0_W < 'a > { w : & 'a mut W , } impl < 'a > EVENT0_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``event0`` Event"]
# [inline (always)]
pub fn event0 (& self) -> EVENT0_R { EVENT0_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``event0`` Event"]
# [inline (always)]
pub fn event0 (& mut self) -> EVENT0_W { EVENT0_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [preamble_crc](preamble_crc) module"]
pub type PREAMBLE_CRC = crate :: Reg < u32 , _PREAMBLE_CRC > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PREAMBLE_CRC ; # [doc = "`read()` method returns [preamble_crc::R](preamble_crc::R) reader structure"]
impl crate :: Readable for PREAMBLE_CRC { } # [doc = "`write(|w| ..)` method takes [preamble_crc::W](preamble_crc::W) writer structure"]
impl crate :: Writable for PREAMBLE_CRC { } # [doc = ""]
pub mod preamble_crc { # [doc = "Reader of register PREAMBLE_CRC"]
pub type R = crate :: R < u32 , super :: PREAMBLE_CRC > ; # [doc = "Writer for register PREAMBLE_CRC"]
pub type W = crate :: W < u32 , super :: PREAMBLE_CRC > ; # [doc = "Register PREAMBLE_CRC `reset()`'s with value 0x01"]
impl crate :: ResetValue for super :: PREAMBLE_CRC { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x01 } } # [doc = "Reader of field `preamble_crc`"]
pub type PREAMBLE_CRC_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `preamble_crc`"]
pub struct PREAMBLE_CRC_W < 'a > { w : & 'a mut W , } impl < 'a > PREAMBLE_CRC_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn preamble_crc (& self) -> PREAMBLE_CRC_R { PREAMBLE_CRC_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn preamble_crc (& mut self) -> PREAMBLE_CRC_W { PREAMBLE_CRC_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [preamble_errors](preamble_errors) module"]
pub type PREAMBLE_ERRORS = crate :: Reg < u32 , _PREAMBLE_ERRORS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PREAMBLE_ERRORS ; # [doc = "`read()` method returns [preamble_errors::R](preamble_errors::R) reader structure"]
impl crate :: Readable for PREAMBLE_ERRORS { } # [doc = "`write(|w| ..)` method takes [preamble_errors::W](preamble_errors::W) writer structure"]
impl crate :: Writable for PREAMBLE_ERRORS { } # [doc = ""]
pub mod preamble_errors { # [doc = "Reader of register PREAMBLE_ERRORS"]
pub type R = crate :: R < u32 , super :: PREAMBLE_ERRORS > ; # [doc = "Writer for register PREAMBLE_ERRORS"]
pub type W = crate :: W < u32 , super :: PREAMBLE_ERRORS > ; # [doc = "Register PREAMBLE_ERRORS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PREAMBLE_ERRORS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `preamble_errors`"]
pub type PREAMBLE_ERRORS_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `preamble_errors`"]
pub struct PREAMBLE_ERRORS_W < 'a > { w : & 'a mut W , } impl < 'a > PREAMBLE_ERRORS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn preamble_errors (& self) -> PREAMBLE_ERRORS_R { PREAMBLE_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn preamble_errors (& mut self) -> PREAMBLE_ERRORS_W { PREAMBLE_ERRORS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crc_errors](crc_errors) module"]
pub type CRC_ERRORS = crate :: Reg < u32 , _CRC_ERRORS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CRC_ERRORS ; # [doc = "`read()` method returns [crc_errors::R](crc_errors::R) reader structure"]
impl crate :: Readable for CRC_ERRORS { } # [doc = "`write(|w| ..)` method takes [crc_errors::W](crc_errors::W) writer structure"]
impl crate :: Writable for CRC_ERRORS { } # [doc = ""]
pub mod crc_errors { # [doc = "Reader of register CRC_ERRORS"]
pub type R = crate :: R < u32 , super :: CRC_ERRORS > ; # [doc = "Writer for register CRC_ERRORS"]
pub type W = crate :: W < u32 , super :: CRC_ERRORS > ; # [doc = "Register CRC_ERRORS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: CRC_ERRORS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `crc_errors`"]
pub type CRC_ERRORS_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `crc_errors`"]
pub struct CRC_ERRORS_W < 'a > { w : & 'a mut W , } impl < 'a > CRC_ERRORS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn crc_errors (& self) -> CRC_ERRORS_R { CRC_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn crc_errors (& mut self) -> CRC_ERRORS_W { CRC_ERRORS_W { w : self } } } } } # [doc = "ETHPHY"]
pub struct ETHPHY { _marker : PhantomData < * const () > } unsafe impl Send for ETHPHY { } impl ETHPHY { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ethphy :: RegisterBlock { 0xf000_2000 as * const _ } } impl Deref for ETHPHY { type Target = ethphy :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * ETHPHY :: ptr () } } } # [doc = "ETHPHY"]
pub mod ethphy { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub crg_reset : CRG_RESET , # [doc = "0x04 - "]
pub rx_inband_status : RX_INBAND_STATUS , # [doc = "0x08 - "]
pub mdio_w : MDIO_W , # [doc = "0x0c - "]
pub mdio_r : MDIO_R , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crg_reset](crg_reset) module"]
pub type CRG_RESET = crate :: Reg < u32 , _CRG_RESET > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CRG_RESET ; # [doc = "`read()` method returns [crg_reset::R](crg_reset::R) reader structure"]
impl crate :: Readable for CRG_RESET { } # [doc = "`write(|w| ..)` method takes [crg_reset::W](crg_reset::W) writer structure"]
impl crate :: Writable for CRG_RESET { } # [doc = ""]
pub mod crg_reset { # [doc = "Reader of register CRG_RESET"]
pub type R = crate :: R < u32 , super :: CRG_RESET > ; # [doc = "Writer for register CRG_RESET"]
pub type W = crate :: W < u32 , super :: CRG_RESET > ; # [doc = "Register CRG_RESET `reset()`'s with value 0"]
impl crate :: ResetValue for super :: CRG_RESET { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `crg_reset`"]
pub type CRG_RESET_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `crg_reset`"]
pub struct CRG_RESET_W < 'a > { w : & 'a mut W , } impl < 'a > CRG_RESET_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn crg_reset (& self) -> CRG_RESET_R { CRG_RESET_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn crg_reset (& mut self) -> CRG_RESET_W { CRG_RESET_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rx_inband_status](rx_inband_status) module"]
pub type RX_INBAND_STATUS = crate :: Reg < u32 , _RX_INBAND_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RX_INBAND_STATUS ; # [doc = "`read()` method returns [rx_inband_status::R](rx_inband_status::R) reader structure"]
impl crate :: Readable for RX_INBAND_STATUS { } # [doc = "`write(|w| ..)` method takes [rx_inband_status::W](rx_inband_status::W) writer structure"]
impl crate :: Writable for RX_INBAND_STATUS { } # [doc = ""]
pub mod rx_inband_status { # [doc = "Reader of register RX_INBAND_STATUS"]
pub type R = crate :: R < u32 , super :: RX_INBAND_STATUS > ; # [doc = "Writer for register RX_INBAND_STATUS"]
pub type W = crate :: W < u32 , super :: RX_INBAND_STATUS > ; # [doc = "Register RX_INBAND_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RX_INBAND_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `link_status`"]
pub type LINK_STATUS_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `link_status`"]
pub struct LINK_STATUS_W < 'a > { w : & 'a mut W , } impl < 'a > LINK_STATUS_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `clock_speed`"]
pub type CLOCK_SPEED_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `clock_speed`"]
pub struct CLOCK_SPEED_W < 'a > { w : & 'a mut W , } impl < 'a > CLOCK_SPEED_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Reader of field `duplex_status`"]
pub type DUPLEX_STATUS_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `duplex_status`"]
pub struct DUPLEX_STATUS_W < 'a > { w : & 'a mut W , } impl < 'a > DUPLEX_STATUS_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 2)) | (((value as u32) & 0x01) << 2) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn link_status (& self) -> LINK_STATUS_R { LINK_STATUS_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn clock_speed (& self) -> CLOCK_SPEED_R { CLOCK_SPEED_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn duplex_status (& self) -> DUPLEX_STATUS_R { DUPLEX_STATUS_R :: new (((self . bits >> 2) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn link_status (& mut self) -> LINK_STATUS_W { LINK_STATUS_W { w : self } } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn clock_speed (& mut self) -> CLOCK_SPEED_W { CLOCK_SPEED_W { w : self } } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn duplex_status (& mut self) -> DUPLEX_STATUS_W { DUPLEX_STATUS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mdio_w](mdio_w) module"]
pub type MDIO_W = crate :: Reg < u32 , _MDIO_W > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MDIO_W ; # [doc = "`read()` method returns [mdio_w::R](mdio_w::R) reader structure"]
impl crate :: Readable for MDIO_W { } # [doc = "`write(|w| ..)` method takes [mdio_w::W](mdio_w::W) writer structure"]
impl crate :: Writable for MDIO_W { } # [doc = ""]
pub mod mdio_w { # [doc = "Reader of register MDIO_W"]
pub type R = crate :: R < u32 , super :: MDIO_W > ; # [doc = "Writer for register MDIO_W"]
pub type W = crate :: W < u32 , super :: MDIO_W > ; # [doc = "Register MDIO_W `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MDIO_W { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `mdc`"]
pub type MDC_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `mdc`"]
pub struct MDC_W < 'a > { w : & 'a mut W , } impl < 'a > MDC_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `oe`"]
pub type OE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `oe`"]
pub struct OE_W < 'a > { w : & 'a mut W , } impl < 'a > OE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Reader of field `w`"]
pub type W_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `w`"]
pub struct W_W < 'a > { w : & 'a mut W , } impl < 'a > W_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 2)) | (((value as u32) & 0x01) << 2) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn mdc (& self) -> MDC_R { MDC_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn oe (& self) -> OE_R { OE_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn w (& self) -> W_R { W_R :: new (((self . bits >> 2) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn mdc (& mut self) -> MDC_W { MDC_W { w : self } } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn oe (& mut self) -> OE_W { OE_W { w : self } } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn w (& mut self) -> W_W { W_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mdio_r](mdio_r) module"]
pub type MDIO_R = crate :: Reg < u32 , _MDIO_R > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MDIO_R ; # [doc = "`read()` method returns [mdio_r::R](mdio_r::R) reader structure"]
impl crate :: Readable for MDIO_R { } # [doc = "`write(|w| ..)` method takes [mdio_r::W](mdio_r::W) writer structure"]
impl crate :: Writable for MDIO_R { } # [doc = ""]
pub mod mdio_r { # [doc = "Reader of register MDIO_R"]
pub type R = crate :: R < u32 , super :: MDIO_R > ; # [doc = "Writer for register MDIO_R"]
pub type W = crate :: W < u32 , super :: MDIO_R > ; # [doc = "Register MDIO_R `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MDIO_R { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `r`"]
pub type R_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `r`"]
pub struct R_W < 'a > { w : & 'a mut W , } impl < 'a > R_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn r (& self) -> R_R { R_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn r (& mut self) -> R_W { R_W { w : self } } } } } # [doc = "HUB75_PALETTE"]
pub struct HUB75_PALETTE { _marker : PhantomData < * const () > } unsafe impl Send for HUB75_PALETTE { } impl HUB75_PALETTE { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const hub75_palette :: RegisterBlock { 0xf000_2800 as * const _ } } impl Deref for HUB75_PALETTE { type Target = hub75_palette :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * HUB75_PALETTE :: ptr () } } } # [doc = "HUB75_PALETTE"]
pub mod hub75_palette { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - 32 x 256-bit memory"]
pub hub75_palette : HUB75_PALETTE , } # [doc = "32 x 256-bit memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hub75_palette](hub75_palette) module"]
pub type HUB75_PALETTE = crate :: Reg < u32 , _HUB75_PALETTE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _HUB75_PALETTE ; # [doc = "`read()` method returns [hub75_palette::R](hub75_palette::R) reader structure"]
impl crate :: Readable for HUB75_PALETTE { } # [doc = "`write(|w| ..)` method takes [hub75_palette::W](hub75_palette::W) writer structure"]
impl crate :: Writable for HUB75_PALETTE { } # [doc = "32 x 256-bit memory"]
pub mod hub75_palette { # [doc = "Reader of register HUB75_PALETTE"]
pub type R = crate :: R < u32 , super :: HUB75_PALETTE > ; # [doc = "Writer for register HUB75_PALETTE"]
pub type W = crate :: W < u32 , super :: HUB75_PALETTE > ; # [doc = "Register HUB75_PALETTE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: HUB75_PALETTE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `hub75_palette`"]
pub type HUB75_PALETTE_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `hub75_palette`"]
pub struct HUB75_PALETTE_W < 'a > { w : & 'a mut W , } impl < 'a > HUB75_PALETTE_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn hub75_palette (& self) -> HUB75_PALETTE_R { HUB75_PALETTE_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn hub75_palette (& mut self) -> HUB75_PALETTE_W { HUB75_PALETTE_W { w : self } } } } } # [doc = "HUB75"]
pub struct HUB75 { _marker : PhantomData < * const () > } unsafe impl Send for HUB75 { } impl HUB75 { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const hub75 :: RegisterBlock { 0xf000_3000 as * const _ } } impl Deref for HUB75 { type Target = hub75 :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * HUB75 :: ptr () } } } # [doc = "HUB75"]
pub mod hub75 { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub ctrl : CTRL , # [doc = "0x04 - "]
pub panel0_0 : PANEL0_0 , # [doc = "0x08 - "]
pub panel0_1 : PANEL0_1 , # [doc = "0x0c - "]
pub panel0_2 : PANEL0_2 , # [doc = "0x10 - "]
pub panel0_3 : PANEL0_3 , # [doc = "0x14 - "]
pub panel1_0 : PANEL1_0 , # [doc = "0x18 - "]
pub panel1_1 : PANEL1_1 , # [doc = "0x1c - "]
pub panel1_2 : PANEL1_2 , # [doc = "0x20 - "]
pub panel1_3 : PANEL1_3 , # [doc = "0x24 - "]
pub panel2_0 : PANEL2_0 , # [doc = "0x28 - "]
pub panel2_1 : PANEL2_1 , # [doc = "0x2c - "]
pub panel2_2 : PANEL2_2 , # [doc = "0x30 - "]
pub panel2_3 : PANEL2_3 , # [doc = "0x34 - "]
pub panel3_0 : PANEL3_0 , # [doc = "0x38 - "]
pub panel3_1 : PANEL3_1 , # [doc = "0x3c - "]
pub panel3_2 : PANEL3_2 , # [doc = "0x40 - "]
pub panel3_3 : PANEL3_3 , # [doc = "0x44 - "]
pub panel4_0 : PANEL4_0 , # [doc = "0x48 - "]
pub panel4_1 : PANEL4_1 , # [doc = "0x4c - "]
pub panel4_2 : PANEL4_2 , # [doc = "0x50 - "]
pub panel4_3 : PANEL4_3 , # [doc = "0x54 - "]
pub panel5_0 : PANEL5_0 , # [doc = "0x58 - "]
pub panel5_1 : PANEL5_1 , # [doc = "0x5c - "]
pub panel5_2 : PANEL5_2 , # [doc = "0x60 - "]
pub panel5_3 : PANEL5_3 , # [doc = "0x64 - "]
pub panel6_0 : PANEL6_0 , # [doc = "0x68 - "]
pub panel6_1 : PANEL6_1 , # [doc = "0x6c - "]
pub panel6_2 : PANEL6_2 , # [doc = "0x70 - "]
pub panel6_3 : PANEL6_3 , # [doc = "0x74 - "]
pub panel7_0 : PANEL7_0 , # [doc = "0x78 - "]
pub panel7_1 : PANEL7_1 , # [doc = "0x7c - "]
pub panel7_2 : PANEL7_2 , # [doc = "0x80 - "]
pub panel7_3 : PANEL7_3 , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrl](ctrl) module"]
pub type CTRL = crate :: Reg < u32 , _CTRL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CTRL ; # [doc = "`read()` method returns [ctrl::R](ctrl::R) reader structure"]
impl crate :: Readable for CTRL { } # [doc = "`write(|w| ..)` method takes [ctrl::W](ctrl::W) writer structure"]
impl crate :: Writable for CTRL { } # [doc = ""]
pub mod ctrl { # [doc = "Reader of register CTRL"]
pub type R = crate :: R < u32 , super :: CTRL > ; # [doc = "Writer for register CTRL"]
pub type W = crate :: W < u32 , super :: CTRL > ; # [doc = "Register CTRL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: CTRL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `indexed`"]
pub type INDEXED_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `indexed`"]
pub struct INDEXED_W < 'a > { w : & 'a mut W , } impl < 'a > INDEXED_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `enabled`"]
pub type ENABLED_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `enabled`"]
pub struct ENABLED_W < 'a > { w : & 'a mut W , } impl < 'a > ENABLED_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Reader of field `width`"]
pub type WIDTH_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `width`"]
pub struct WIDTH_W < 'a > { w : & 'a mut W , } impl < 'a > WIDTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xffff << 2)) | (((value as u32) & 0xffff) << 2) ; self . w } } impl R { # [doc = "Bit 0 - Display an indexed image"]
# [inline (always)]
pub fn indexed (& self) -> INDEXED_R { INDEXED_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Enable the output"]
# [inline (always)]
pub fn enabled (& self) -> ENABLED_R { ENABLED_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bits 2:17 - Width of the image"]
# [inline (always)]
pub fn width (& self) -> WIDTH_R { WIDTH_R :: new (((self . bits >> 2) & 0xffff) as u16) } } impl W { # [doc = "Bit 0 - Display an indexed image"]
# [inline (always)]
pub fn indexed (& mut self) -> INDEXED_W { INDEXED_W { w : self } } # [doc = "Bit 1 - Enable the output"]
# [inline (always)]
pub fn enabled (& mut self) -> ENABLED_W { ENABLED_W { w : self } } # [doc = "Bits 2:17 - Width of the image"]
# [inline (always)]
pub fn width (& mut self) -> WIDTH_W { WIDTH_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel0_0](panel0_0) module"]
pub type PANEL0_0 = crate :: Reg < u32 , _PANEL0_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL0_0 ; # [doc = "`read()` method returns [panel0_0::R](panel0_0::R) reader structure"]
impl crate :: Readable for PANEL0_0 { } # [doc = "`write(|w| ..)` method takes [panel0_0::W](panel0_0::W) writer structure"]
impl crate :: Writable for PANEL0_0 { } # [doc = ""]
pub mod panel0_0 { # [doc = "Reader of register PANEL0_0"]
pub type R = crate :: R < u32 , super :: PANEL0_0 > ; # [doc = "Writer for register PANEL0_0"]
pub type W = crate :: W < u32 , super :: PANEL0_0 > ; # [doc = "Register PANEL0_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL0_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel0_1](panel0_1) module"]
pub type PANEL0_1 = crate :: Reg < u32 , _PANEL0_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL0_1 ; # [doc = "`read()` method returns [panel0_1::R](panel0_1::R) reader structure"]
impl crate :: Readable for PANEL0_1 { } # [doc = "`write(|w| ..)` method takes [panel0_1::W](panel0_1::W) writer structure"]
impl crate :: Writable for PANEL0_1 { } # [doc = ""]
pub mod panel0_1 { # [doc = "Reader of register PANEL0_1"]
pub type R = crate :: R < u32 , super :: PANEL0_1 > ; # [doc = "Writer for register PANEL0_1"]
pub type W = crate :: W < u32 , super :: PANEL0_1 > ; # [doc = "Register PANEL0_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL0_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel0_2](panel0_2) module"]
pub type PANEL0_2 = crate :: Reg < u32 , _PANEL0_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL0_2 ; # [doc = "`read()` method returns [panel0_2::R](panel0_2::R) reader structure"]
impl crate :: Readable for PANEL0_2 { } # [doc = "`write(|w| ..)` method takes [panel0_2::W](panel0_2::W) writer structure"]
impl crate :: Writable for PANEL0_2 { } # [doc = ""]
pub mod panel0_2 { # [doc = "Reader of register PANEL0_2"]
pub type R = crate :: R < u32 , super :: PANEL0_2 > ; # [doc = "Writer for register PANEL0_2"]
pub type W = crate :: W < u32 , super :: PANEL0_2 > ; # [doc = "Register PANEL0_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL0_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel0_3](panel0_3) module"]
pub type PANEL0_3 = crate :: Reg < u32 , _PANEL0_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL0_3 ; # [doc = "`read()` method returns [panel0_3::R](panel0_3::R) reader structure"]
impl crate :: Readable for PANEL0_3 { } # [doc = "`write(|w| ..)` method takes [panel0_3::W](panel0_3::W) writer structure"]
impl crate :: Writable for PANEL0_3 { } # [doc = ""]
pub mod panel0_3 { # [doc = "Reader of register PANEL0_3"]
pub type R = crate :: R < u32 , super :: PANEL0_3 > ; # [doc = "Writer for register PANEL0_3"]
pub type W = crate :: W < u32 , super :: PANEL0_3 > ; # [doc = "Register PANEL0_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL0_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel1_0](panel1_0) module"]
pub type PANEL1_0 = crate :: Reg < u32 , _PANEL1_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL1_0 ; # [doc = "`read()` method returns [panel1_0::R](panel1_0::R) reader structure"]
impl crate :: Readable for PANEL1_0 { } # [doc = "`write(|w| ..)` method takes [panel1_0::W](panel1_0::W) writer structure"]
impl crate :: Writable for PANEL1_0 { } # [doc = ""]
pub mod panel1_0 { # [doc = "Reader of register PANEL1_0"]
pub type R = crate :: R < u32 , super :: PANEL1_0 > ; # [doc = "Writer for register PANEL1_0"]
pub type W = crate :: W < u32 , super :: PANEL1_0 > ; # [doc = "Register PANEL1_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL1_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel1_1](panel1_1) module"]
pub type PANEL1_1 = crate :: Reg < u32 , _PANEL1_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL1_1 ; # [doc = "`read()` method returns [panel1_1::R](panel1_1::R) reader structure"]
impl crate :: Readable for PANEL1_1 { } # [doc = "`write(|w| ..)` method takes [panel1_1::W](panel1_1::W) writer structure"]
impl crate :: Writable for PANEL1_1 { } # [doc = ""]
pub mod panel1_1 { # [doc = "Reader of register PANEL1_1"]
pub type R = crate :: R < u32 , super :: PANEL1_1 > ; # [doc = "Writer for register PANEL1_1"]
pub type W = crate :: W < u32 , super :: PANEL1_1 > ; # [doc = "Register PANEL1_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL1_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel1_2](panel1_2) module"]
pub type PANEL1_2 = crate :: Reg < u32 , _PANEL1_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL1_2 ; # [doc = "`read()` method returns [panel1_2::R](panel1_2::R) reader structure"]
impl crate :: Readable for PANEL1_2 { } # [doc = "`write(|w| ..)` method takes [panel1_2::W](panel1_2::W) writer structure"]
impl crate :: Writable for PANEL1_2 { } # [doc = ""]
pub mod panel1_2 { # [doc = "Reader of register PANEL1_2"]
pub type R = crate :: R < u32 , super :: PANEL1_2 > ; # [doc = "Writer for register PANEL1_2"]
pub type W = crate :: W < u32 , super :: PANEL1_2 > ; # [doc = "Register PANEL1_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL1_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel1_3](panel1_3) module"]
pub type PANEL1_3 = crate :: Reg < u32 , _PANEL1_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL1_3 ; # [doc = "`read()` method returns [panel1_3::R](panel1_3::R) reader structure"]
impl crate :: Readable for PANEL1_3 { } # [doc = "`write(|w| ..)` method takes [panel1_3::W](panel1_3::W) writer structure"]
impl crate :: Writable for PANEL1_3 { } # [doc = ""]
pub mod panel1_3 { # [doc = "Reader of register PANEL1_3"]
pub type R = crate :: R < u32 , super :: PANEL1_3 > ; # [doc = "Writer for register PANEL1_3"]
pub type W = crate :: W < u32 , super :: PANEL1_3 > ; # [doc = "Register PANEL1_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL1_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel2_0](panel2_0) module"]
pub type PANEL2_0 = crate :: Reg < u32 , _PANEL2_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL2_0 ; # [doc = "`read()` method returns [panel2_0::R](panel2_0::R) reader structure"]
impl crate :: Readable for PANEL2_0 { } # [doc = "`write(|w| ..)` method takes [panel2_0::W](panel2_0::W) writer structure"]
impl crate :: Writable for PANEL2_0 { } # [doc = ""]
pub mod panel2_0 { # [doc = "Reader of register PANEL2_0"]
pub type R = crate :: R < u32 , super :: PANEL2_0 > ; # [doc = "Writer for register PANEL2_0"]
pub type W = crate :: W < u32 , super :: PANEL2_0 > ; # [doc = "Register PANEL2_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL2_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel2_1](panel2_1) module"]
pub type PANEL2_1 = crate :: Reg < u32 , _PANEL2_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL2_1 ; # [doc = "`read()` method returns [panel2_1::R](panel2_1::R) reader structure"]
impl crate :: Readable for PANEL2_1 { } # [doc = "`write(|w| ..)` method takes [panel2_1::W](panel2_1::W) writer structure"]
impl crate :: Writable for PANEL2_1 { } # [doc = ""]
pub mod panel2_1 { # [doc = "Reader of register PANEL2_1"]
pub type R = crate :: R < u32 , super :: PANEL2_1 > ; # [doc = "Writer for register PANEL2_1"]
pub type W = crate :: W < u32 , super :: PANEL2_1 > ; # [doc = "Register PANEL2_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL2_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel2_2](panel2_2) module"]
pub type PANEL2_2 = crate :: Reg < u32 , _PANEL2_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL2_2 ; # [doc = "`read()` method returns [panel2_2::R](panel2_2::R) reader structure"]
impl crate :: Readable for PANEL2_2 { } # [doc = "`write(|w| ..)` method takes [panel2_2::W](panel2_2::W) writer structure"]
impl crate :: Writable for PANEL2_2 { } # [doc = ""]
pub mod panel2_2 { # [doc = "Reader of register PANEL2_2"]
pub type R = crate :: R < u32 , super :: PANEL2_2 > ; # [doc = "Writer for register PANEL2_2"]
pub type W = crate :: W < u32 , super :: PANEL2_2 > ; # [doc = "Register PANEL2_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL2_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel2_3](panel2_3) module"]
pub type PANEL2_3 = crate :: Reg < u32 , _PANEL2_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL2_3 ; # [doc = "`read()` method returns [panel2_3::R](panel2_3::R) reader structure"]
impl crate :: Readable for PANEL2_3 { } # [doc = "`write(|w| ..)` method takes [panel2_3::W](panel2_3::W) writer structure"]
impl crate :: Writable for PANEL2_3 { } # [doc = ""]
pub mod panel2_3 { # [doc = "Reader of register PANEL2_3"]
pub type R = crate :: R < u32 , super :: PANEL2_3 > ; # [doc = "Writer for register PANEL2_3"]
pub type W = crate :: W < u32 , super :: PANEL2_3 > ; # [doc = "Register PANEL2_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL2_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel3_0](panel3_0) module"]
pub type PANEL3_0 = crate :: Reg < u32 , _PANEL3_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL3_0 ; # [doc = "`read()` method returns [panel3_0::R](panel3_0::R) reader structure"]
impl crate :: Readable for PANEL3_0 { } # [doc = "`write(|w| ..)` method takes [panel3_0::W](panel3_0::W) writer structure"]
impl crate :: Writable for PANEL3_0 { } # [doc = ""]
pub mod panel3_0 { # [doc = "Reader of register PANEL3_0"]
pub type R = crate :: R < u32 , super :: PANEL3_0 > ; # [doc = "Writer for register PANEL3_0"]
pub type W = crate :: W < u32 , super :: PANEL3_0 > ; # [doc = "Register PANEL3_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL3_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel3_1](panel3_1) module"]
pub type PANEL3_1 = crate :: Reg < u32 , _PANEL3_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL3_1 ; # [doc = "`read()` method returns [panel3_1::R](panel3_1::R) reader structure"]
impl crate :: Readable for PANEL3_1 { } # [doc = "`write(|w| ..)` method takes [panel3_1::W](panel3_1::W) writer structure"]
impl crate :: Writable for PANEL3_1 { } # [doc = ""]
pub mod panel3_1 { # [doc = "Reader of register PANEL3_1"]
pub type R = crate :: R < u32 , super :: PANEL3_1 > ; # [doc = "Writer for register PANEL3_1"]
pub type W = crate :: W < u32 , super :: PANEL3_1 > ; # [doc = "Register PANEL3_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL3_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel3_2](panel3_2) module"]
pub type PANEL3_2 = crate :: Reg < u32 , _PANEL3_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL3_2 ; # [doc = "`read()` method returns [panel3_2::R](panel3_2::R) reader structure"]
impl crate :: Readable for PANEL3_2 { } # [doc = "`write(|w| ..)` method takes [panel3_2::W](panel3_2::W) writer structure"]
impl crate :: Writable for PANEL3_2 { } # [doc = ""]
pub mod panel3_2 { # [doc = "Reader of register PANEL3_2"]
pub type R = crate :: R < u32 , super :: PANEL3_2 > ; # [doc = "Writer for register PANEL3_2"]
pub type W = crate :: W < u32 , super :: PANEL3_2 > ; # [doc = "Register PANEL3_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL3_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel3_3](panel3_3) module"]
pub type PANEL3_3 = crate :: Reg < u32 , _PANEL3_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL3_3 ; # [doc = "`read()` method returns [panel3_3::R](panel3_3::R) reader structure"]
impl crate :: Readable for PANEL3_3 { } # [doc = "`write(|w| ..)` method takes [panel3_3::W](panel3_3::W) writer structure"]
impl crate :: Writable for PANEL3_3 { } # [doc = ""]
pub mod panel3_3 { # [doc = "Reader of register PANEL3_3"]
pub type R = crate :: R < u32 , super :: PANEL3_3 > ; # [doc = "Writer for register PANEL3_3"]
pub type W = crate :: W < u32 , super :: PANEL3_3 > ; # [doc = "Register PANEL3_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL3_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel4_0](panel4_0) module"]
pub type PANEL4_0 = crate :: Reg < u32 , _PANEL4_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL4_0 ; # [doc = "`read()` method returns [panel4_0::R](panel4_0::R) reader structure"]
impl crate :: Readable for PANEL4_0 { } # [doc = "`write(|w| ..)` method takes [panel4_0::W](panel4_0::W) writer structure"]
impl crate :: Writable for PANEL4_0 { } # [doc = ""]
pub mod panel4_0 { # [doc = "Reader of register PANEL4_0"]
pub type R = crate :: R < u32 , super :: PANEL4_0 > ; # [doc = "Writer for register PANEL4_0"]
pub type W = crate :: W < u32 , super :: PANEL4_0 > ; # [doc = "Register PANEL4_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL4_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel4_1](panel4_1) module"]
pub type PANEL4_1 = crate :: Reg < u32 , _PANEL4_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL4_1 ; # [doc = "`read()` method returns [panel4_1::R](panel4_1::R) reader structure"]
impl crate :: Readable for PANEL4_1 { } # [doc = "`write(|w| ..)` method takes [panel4_1::W](panel4_1::W) writer structure"]
impl crate :: Writable for PANEL4_1 { } # [doc = ""]
pub mod panel4_1 { # [doc = "Reader of register PANEL4_1"]
pub type R = crate :: R < u32 , super :: PANEL4_1 > ; # [doc = "Writer for register PANEL4_1"]
pub type W = crate :: W < u32 , super :: PANEL4_1 > ; # [doc = "Register PANEL4_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL4_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel4_2](panel4_2) module"]
pub type PANEL4_2 = crate :: Reg < u32 , _PANEL4_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL4_2 ; # [doc = "`read()` method returns [panel4_2::R](panel4_2::R) reader structure"]
impl crate :: Readable for PANEL4_2 { } # [doc = "`write(|w| ..)` method takes [panel4_2::W](panel4_2::W) writer structure"]
impl crate :: Writable for PANEL4_2 { } # [doc = ""]
pub mod panel4_2 { # [doc = "Reader of register PANEL4_2"]
pub type R = crate :: R < u32 , super :: PANEL4_2 > ; # [doc = "Writer for register PANEL4_2"]
pub type W = crate :: W < u32 , super :: PANEL4_2 > ; # [doc = "Register PANEL4_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL4_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel4_3](panel4_3) module"]
pub type PANEL4_3 = crate :: Reg < u32 , _PANEL4_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL4_3 ; # [doc = "`read()` method returns [panel4_3::R](panel4_3::R) reader structure"]
impl crate :: Readable for PANEL4_3 { } # [doc = "`write(|w| ..)` method takes [panel4_3::W](panel4_3::W) writer structure"]
impl crate :: Writable for PANEL4_3 { } # [doc = ""]
pub mod panel4_3 { # [doc = "Reader of register PANEL4_3"]
pub type R = crate :: R < u32 , super :: PANEL4_3 > ; # [doc = "Writer for register PANEL4_3"]
pub type W = crate :: W < u32 , super :: PANEL4_3 > ; # [doc = "Register PANEL4_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL4_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel5_0](panel5_0) module"]
pub type PANEL5_0 = crate :: Reg < u32 , _PANEL5_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL5_0 ; # [doc = "`read()` method returns [panel5_0::R](panel5_0::R) reader structure"]
impl crate :: Readable for PANEL5_0 { } # [doc = "`write(|w| ..)` method takes [panel5_0::W](panel5_0::W) writer structure"]
impl crate :: Writable for PANEL5_0 { } # [doc = ""]
pub mod panel5_0 { # [doc = "Reader of register PANEL5_0"]
pub type R = crate :: R < u32 , super :: PANEL5_0 > ; # [doc = "Writer for register PANEL5_0"]
pub type W = crate :: W < u32 , super :: PANEL5_0 > ; # [doc = "Register PANEL5_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL5_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel5_1](panel5_1) module"]
pub type PANEL5_1 = crate :: Reg < u32 , _PANEL5_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL5_1 ; # [doc = "`read()` method returns [panel5_1::R](panel5_1::R) reader structure"]
impl crate :: Readable for PANEL5_1 { } # [doc = "`write(|w| ..)` method takes [panel5_1::W](panel5_1::W) writer structure"]
impl crate :: Writable for PANEL5_1 { } # [doc = ""]
pub mod panel5_1 { # [doc = "Reader of register PANEL5_1"]
pub type R = crate :: R < u32 , super :: PANEL5_1 > ; # [doc = "Writer for register PANEL5_1"]
pub type W = crate :: W < u32 , super :: PANEL5_1 > ; # [doc = "Register PANEL5_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL5_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel5_2](panel5_2) module"]
pub type PANEL5_2 = crate :: Reg < u32 , _PANEL5_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL5_2 ; # [doc = "`read()` method returns [panel5_2::R](panel5_2::R) reader structure"]
impl crate :: Readable for PANEL5_2 { } # [doc = "`write(|w| ..)` method takes [panel5_2::W](panel5_2::W) writer structure"]
impl crate :: Writable for PANEL5_2 { } # [doc = ""]
pub mod panel5_2 { # [doc = "Reader of register PANEL5_2"]
pub type R = crate :: R < u32 , super :: PANEL5_2 > ; # [doc = "Writer for register PANEL5_2"]
pub type W = crate :: W < u32 , super :: PANEL5_2 > ; # [doc = "Register PANEL5_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL5_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel5_3](panel5_3) module"]
pub type PANEL5_3 = crate :: Reg < u32 , _PANEL5_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL5_3 ; # [doc = "`read()` method returns [panel5_3::R](panel5_3::R) reader structure"]
impl crate :: Readable for PANEL5_3 { } # [doc = "`write(|w| ..)` method takes [panel5_3::W](panel5_3::W) writer structure"]
impl crate :: Writable for PANEL5_3 { } # [doc = ""]
pub mod panel5_3 { # [doc = "Reader of register PANEL5_3"]
pub type R = crate :: R < u32 , super :: PANEL5_3 > ; # [doc = "Writer for register PANEL5_3"]
pub type W = crate :: W < u32 , super :: PANEL5_3 > ; # [doc = "Register PANEL5_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL5_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel6_0](panel6_0) module"]
pub type PANEL6_0 = crate :: Reg < u32 , _PANEL6_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL6_0 ; # [doc = "`read()` method returns [panel6_0::R](panel6_0::R) reader structure"]
impl crate :: Readable for PANEL6_0 { } # [doc = "`write(|w| ..)` method takes [panel6_0::W](panel6_0::W) writer structure"]
impl crate :: Writable for PANEL6_0 { } # [doc = ""]
pub mod panel6_0 { # [doc = "Reader of register PANEL6_0"]
pub type R = crate :: R < u32 , super :: PANEL6_0 > ; # [doc = "Writer for register PANEL6_0"]
pub type W = crate :: W < u32 , super :: PANEL6_0 > ; # [doc = "Register PANEL6_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL6_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel6_1](panel6_1) module"]
pub type PANEL6_1 = crate :: Reg < u32 , _PANEL6_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL6_1 ; # [doc = "`read()` method returns [panel6_1::R](panel6_1::R) reader structure"]
impl crate :: Readable for PANEL6_1 { } # [doc = "`write(|w| ..)` method takes [panel6_1::W](panel6_1::W) writer structure"]
impl crate :: Writable for PANEL6_1 { } # [doc = ""]
pub mod panel6_1 { # [doc = "Reader of register PANEL6_1"]
pub type R = crate :: R < u32 , super :: PANEL6_1 > ; # [doc = "Writer for register PANEL6_1"]
pub type W = crate :: W < u32 , super :: PANEL6_1 > ; # [doc = "Register PANEL6_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL6_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel6_2](panel6_2) module"]
pub type PANEL6_2 = crate :: Reg < u32 , _PANEL6_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL6_2 ; # [doc = "`read()` method returns [panel6_2::R](panel6_2::R) reader structure"]
impl crate :: Readable for PANEL6_2 { } # [doc = "`write(|w| ..)` method takes [panel6_2::W](panel6_2::W) writer structure"]
impl crate :: Writable for PANEL6_2 { } # [doc = ""]
pub mod panel6_2 { # [doc = "Reader of register PANEL6_2"]
pub type R = crate :: R < u32 , super :: PANEL6_2 > ; # [doc = "Writer for register PANEL6_2"]
pub type W = crate :: W < u32 , super :: PANEL6_2 > ; # [doc = "Register PANEL6_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL6_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel6_3](panel6_3) module"]
pub type PANEL6_3 = crate :: Reg < u32 , _PANEL6_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL6_3 ; # [doc = "`read()` method returns [panel6_3::R](panel6_3::R) reader structure"]
impl crate :: Readable for PANEL6_3 { } # [doc = "`write(|w| ..)` method takes [panel6_3::W](panel6_3::W) writer structure"]
impl crate :: Writable for PANEL6_3 { } # [doc = ""]
pub mod panel6_3 { # [doc = "Reader of register PANEL6_3"]
pub type R = crate :: R < u32 , super :: PANEL6_3 > ; # [doc = "Writer for register PANEL6_3"]
pub type W = crate :: W < u32 , super :: PANEL6_3 > ; # [doc = "Register PANEL6_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL6_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel7_0](panel7_0) module"]
pub type PANEL7_0 = crate :: Reg < u32 , _PANEL7_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL7_0 ; # [doc = "`read()` method returns [panel7_0::R](panel7_0::R) reader structure"]
impl crate :: Readable for PANEL7_0 { } # [doc = "`write(|w| ..)` method takes [panel7_0::W](panel7_0::W) writer structure"]
impl crate :: Writable for PANEL7_0 { } # [doc = ""]
pub mod panel7_0 { # [doc = "Reader of register PANEL7_0"]
pub type R = crate :: R < u32 , super :: PANEL7_0 > ; # [doc = "Writer for register PANEL7_0"]
pub type W = crate :: W < u32 , super :: PANEL7_0 > ; # [doc = "Register PANEL7_0 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL7_0 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel7_1](panel7_1) module"]
pub type PANEL7_1 = crate :: Reg < u32 , _PANEL7_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL7_1 ; # [doc = "`read()` method returns [panel7_1::R](panel7_1::R) reader structure"]
impl crate :: Readable for PANEL7_1 { } # [doc = "`write(|w| ..)` method takes [panel7_1::W](panel7_1::W) writer structure"]
impl crate :: Writable for PANEL7_1 { } # [doc = ""]
pub mod panel7_1 { # [doc = "Reader of register PANEL7_1"]
pub type R = crate :: R < u32 , super :: PANEL7_1 > ; # [doc = "Writer for register PANEL7_1"]
pub type W = crate :: W < u32 , super :: PANEL7_1 > ; # [doc = "Register PANEL7_1 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL7_1 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel7_2](panel7_2) module"]
pub type PANEL7_2 = crate :: Reg < u32 , _PANEL7_2 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL7_2 ; # [doc = "`read()` method returns [panel7_2::R](panel7_2::R) reader structure"]
impl crate :: Readable for PANEL7_2 { } # [doc = "`write(|w| ..)` method takes [panel7_2::W](panel7_2::W) writer structure"]
impl crate :: Writable for PANEL7_2 { } # [doc = ""]
pub mod panel7_2 { # [doc = "Reader of register PANEL7_2"]
pub type R = crate :: R < u32 , super :: PANEL7_2 > ; # [doc = "Writer for register PANEL7_2"]
pub type W = crate :: W < u32 , super :: PANEL7_2 > ; # [doc = "Register PANEL7_2 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL7_2 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [panel7_3](panel7_3) module"]
pub type PANEL7_3 = crate :: Reg < u32 , _PANEL7_3 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _PANEL7_3 ; # [doc = "`read()` method returns [panel7_3::R](panel7_3::R) reader structure"]
impl crate :: Readable for PANEL7_3 { } # [doc = "`write(|w| ..)` method takes [panel7_3::W](panel7_3::W) writer structure"]
impl crate :: Writable for PANEL7_3 { } # [doc = ""]
pub mod panel7_3 { # [doc = "Reader of register PANEL7_3"]
pub type R = crate :: R < u32 , super :: PANEL7_3 > ; # [doc = "Writer for register PANEL7_3"]
pub type W = crate :: W < u32 , super :: PANEL7_3 > ; # [doc = "Register PANEL7_3 `reset()`'s with value 0"]
impl crate :: ResetValue for super :: PANEL7_3 { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `x`"]
pub type X_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `x`"]
pub struct X_W < 'a > { w : & 'a mut W , } impl < 'a > X_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } # [doc = "Reader of field `y`"]
pub type Y_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `y`"]
pub struct Y_W < 'a > { w : & 'a mut W , } impl < 'a > Y_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } # [doc = "Reader of field `rot`"]
pub type ROT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rot`"]
pub struct ROT_W < 'a > { w : & 'a mut W , } impl < 'a > ROT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x03 << 16)) | (((value as u32) & 0x03) << 16) ; self . w } } impl R { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& self) -> X_R { X_R :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& self) -> Y_R { Y_R :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& self) -> ROT_R { ROT_R :: new (((self . bits >> 16) & 0x03) as u8) } } impl W { # [doc = "Bits 0:7 - x position in multiples of 32"]
# [inline (always)]
pub fn x (& mut self) -> X_W { X_W { w : self } } # [doc = "Bits 8:15 - y position in multiples of 32"]
# [inline (always)]
pub fn y (& mut self) -> Y_W { Y_W { w : self } } # [doc = "Bits 16:17 - rotation in clockwise 90°"]
# [inline (always)]
pub fn rot (& mut self) -> ROT_W { ROT_W { w : self } } } } } # [doc = "IDENTIFIER_MEM"]
pub struct IDENTIFIER_MEM { _marker : PhantomData < * const () > } unsafe impl Send for IDENTIFIER_MEM { } impl IDENTIFIER_MEM { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const identifier_mem :: RegisterBlock { 0xf000_3800 as * const _ } } impl Deref for IDENTIFIER_MEM { type Target = identifier_mem :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * IDENTIFIER_MEM :: ptr () } } } # [doc = "IDENTIFIER_MEM"]
pub mod identifier_mem { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - 8 x 51-bit memory"]
pub identifier_mem : IDENTIFIER_MEM , } # [doc = "8 x 51-bit memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [identifier_mem](identifier_mem) module"]
pub type IDENTIFIER_MEM = crate :: Reg < u32 , _IDENTIFIER_MEM > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _IDENTIFIER_MEM ; # [doc = "`read()` method returns [identifier_mem::R](identifier_mem::R) reader structure"]
impl crate :: Readable for IDENTIFIER_MEM { } # [doc = "`write(|w| ..)` method takes [identifier_mem::W](identifier_mem::W) writer structure"]
impl crate :: Writable for IDENTIFIER_MEM { } # [doc = "8 x 51-bit memory"]
pub mod identifier_mem { # [doc = "Reader of register IDENTIFIER_MEM"]
pub type R = crate :: R < u32 , super :: IDENTIFIER_MEM > ; # [doc = "Writer for register IDENTIFIER_MEM"]
pub type W = crate :: W < u32 , super :: IDENTIFIER_MEM > ; # [doc = "Register IDENTIFIER_MEM `reset()`'s with value 0"]
impl crate :: ResetValue for super :: IDENTIFIER_MEM { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `identifier_mem`"]
pub type IDENTIFIER_MEM_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `identifier_mem`"]
pub struct IDENTIFIER_MEM_W < 'a > { w : & 'a mut W , } impl < 'a > IDENTIFIER_MEM_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& self) -> IDENTIFIER_MEM_R { IDENTIFIER_MEM_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& mut self) -> IDENTIFIER_MEM_W { IDENTIFIER_MEM_W { w : self } } } } } # [doc = "SDRAM"]
pub struct SDRAM { _marker : PhantomData < * const () > } unsafe impl Send for SDRAM { } impl SDRAM { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const sdram :: RegisterBlock { 0xf000_4000 as * const _ } } impl Deref for SDRAM { type Target = sdram :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * SDRAM :: ptr () } } } # [doc = "SDRAM"]
pub mod sdram { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub dfii_control : DFII_CONTROL , # [doc = "0x04 - "]
pub dfii_pi0_command : DFII_PI0_COMMAND , # [doc = "0x08 - "]
pub dfii_pi0_command_issue : DFII_PI0_COMMAND_ISSUE , # [doc = "0x0c - "]
pub dfii_pi0_address : DFII_PI0_ADDRESS , # [doc = "0x10 - "]
pub dfii_pi0_baddress : DFII_PI0_BADDRESS , # [doc = "0x14 - "]
pub dfii_pi0_wrdata : DFII_PI0_WRDATA , # [doc = "0x18 - "]
pub dfii_pi0_rddata : DFII_PI0_RDDATA , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_control](dfii_control) module"]
pub type DFII_CONTROL = crate :: Reg < u32 , _DFII_CONTROL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_CONTROL ; # [doc = "`read()` method returns [dfii_control::R](dfii_control::R) reader structure"]
impl crate :: Readable for DFII_CONTROL { } # [doc = "`write(|w| ..)` method takes [dfii_control::W](dfii_control::W) writer structure"]
impl crate :: Writable for DFII_CONTROL { } # [doc = ""]
pub mod dfii_control { # [doc = "Reader of register DFII_CONTROL"]
pub type R = crate :: R < u32 , super :: DFII_CONTROL > ; # [doc = "Writer for register DFII_CONTROL"]
pub type W = crate :: W < u32 , super :: DFII_CONTROL > ; # [doc = "Register DFII_CONTROL `reset()`'s with value 0x01"]
impl crate :: ResetValue for super :: DFII_CONTROL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x01 } } # [doc = "Reader of field `sel`"]
pub type SEL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sel`"]
pub struct SEL_W < 'a > { w : & 'a mut W , } impl < 'a > SEL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `cke`"]
pub type CKE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `cke`"]
pub struct CKE_W < 'a > { w : & 'a mut W , } impl < 'a > CKE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Reader of field `odt`"]
pub type ODT_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `odt`"]
pub struct ODT_W < 'a > { w : & 'a mut W , } impl < 'a > ODT_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 2)) | (((value as u32) & 0x01) << 2) ; self . w } } # [doc = "Reader of field `reset_n`"]
pub type RESET_N_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `reset_n`"]
pub struct RESET_N_W < 'a > { w : & 'a mut W , } impl < 'a > RESET_N_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 3)) | (((value as u32) & 0x01) << 3) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& self) -> SEL_R { SEL_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& self) -> CKE_R { CKE_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& self) -> ODT_R { ODT_R :: new (((self . bits >> 2) & 0x01) != 0) } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& self) -> RESET_N_R { RESET_N_R :: new (((self . bits >> 3) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& mut self) -> SEL_W { SEL_W { w : self } } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& mut self) -> CKE_W { CKE_W { w : self } } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& mut self) -> ODT_W { ODT_W { w : self } } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& mut self) -> RESET_N_W { RESET_N_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command](dfii_pi0_command) module"]
pub type DFII_PI0_COMMAND = crate :: Reg < u32 , _DFII_PI0_COMMAND > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_COMMAND ; # [doc = "`read()` method returns [dfii_pi0_command::R](dfii_pi0_command::R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command::W](dfii_pi0_command::W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND { } # [doc = ""]
pub mod dfii_pi0_command { # [doc = "Reader of register DFII_PI0_COMMAND"]
pub type R = crate :: R < u32 , super :: DFII_PI0_COMMAND > ; # [doc = "Writer for register DFII_PI0_COMMAND"]
pub type W = crate :: W < u32 , super :: DFII_PI0_COMMAND > ; # [doc = "Register DFII_PI0_COMMAND `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_COMMAND { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_command`"]
pub type DFII_PI0_COMMAND_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `dfii_pi0_command`"]
pub struct DFII_PI0_COMMAND_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x3f) | ((value as u32) & 0x3f) ; self . w } } impl R { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& self) -> DFII_PI0_COMMAND_R { DFII_PI0_COMMAND_R :: new ((self . bits & 0x3f) as u8) } } impl W { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& mut self) -> DFII_PI0_COMMAND_W { DFII_PI0_COMMAND_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command_issue](dfii_pi0_command_issue) module"]
pub type DFII_PI0_COMMAND_ISSUE = crate :: Reg < u32 , _DFII_PI0_COMMAND_ISSUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_COMMAND_ISSUE ; # [doc = "`read()` method returns [dfii_pi0_command_issue::R](dfii_pi0_command_issue::R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND_ISSUE { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command_issue::W](dfii_pi0_command_issue::W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND_ISSUE { } # [doc = ""]
pub mod dfii_pi0_command_issue { # [doc = "Reader of register DFII_PI0_COMMAND_ISSUE"]
pub type R = crate :: R < u32 , super :: DFII_PI0_COMMAND_ISSUE > ; # [doc = "Writer for register DFII_PI0_COMMAND_ISSUE"]
pub type W = crate :: W < u32 , super :: DFII_PI0_COMMAND_ISSUE > ; # [doc = "Register DFII_PI0_COMMAND_ISSUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_COMMAND_ISSUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_command_issue`"]
pub type DFII_PI0_COMMAND_ISSUE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `dfii_pi0_command_issue`"]
pub struct DFII_PI0_COMMAND_ISSUE_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_ISSUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& self) -> DFII_PI0_COMMAND_ISSUE_R { DFII_PI0_COMMAND_ISSUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& mut self) -> DFII_PI0_COMMAND_ISSUE_W { DFII_PI0_COMMAND_ISSUE_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_address](dfii_pi0_address) module"]
pub type DFII_PI0_ADDRESS = crate :: Reg < u32 , _DFII_PI0_ADDRESS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_ADDRESS ; # [doc = "`read()` method returns [dfii_pi0_address::R](dfii_pi0_address::R) reader structure"]
impl crate :: Readable for DFII_PI0_ADDRESS { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_address::W](dfii_pi0_address::W) writer structure"]
impl crate :: Writable for DFII_PI0_ADDRESS { } # [doc = ""]
pub mod dfii_pi0_address { # [doc = "Reader of register DFII_PI0_ADDRESS"]
pub type R = crate :: R < u32 , super :: DFII_PI0_ADDRESS > ; # [doc = "Writer for register DFII_PI0_ADDRESS"]
pub type W = crate :: W < u32 , super :: DFII_PI0_ADDRESS > ; # [doc = "Register DFII_PI0_ADDRESS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_ADDRESS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_address`"]
pub type DFII_PI0_ADDRESS_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `dfii_pi0_address`"]
pub struct DFII_PI0_ADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_ADDRESS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x07ff) | ((value as u32) & 0x07ff) ; self . w } } impl R { # [doc = "Bits 0:10"]
# [inline (always)]
pub fn dfii_pi0_address (& self) -> DFII_PI0_ADDRESS_R { DFII_PI0_ADDRESS_R :: new ((self . bits & 0x07ff) as u16) } } impl W { # [doc = "Bits 0:10"]
# [inline (always)]
pub fn dfii_pi0_address (& mut self) -> DFII_PI0_ADDRESS_W { DFII_PI0_ADDRESS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_baddress](dfii_pi0_baddress) module"]
pub type DFII_PI0_BADDRESS = crate :: Reg < u32 , _DFII_PI0_BADDRESS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_BADDRESS ; # [doc = "`read()` method returns [dfii_pi0_baddress::R](dfii_pi0_baddress::R) reader structure"]
impl crate :: Readable for DFII_PI0_BADDRESS { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_baddress::W](dfii_pi0_baddress::W) writer structure"]
impl crate :: Writable for DFII_PI0_BADDRESS { } # [doc = ""]
pub mod dfii_pi0_baddress { # [doc = "Reader of register DFII_PI0_BADDRESS"]
pub type R = crate :: R < u32 , super :: DFII_PI0_BADDRESS > ; # [doc = "Writer for register DFII_PI0_BADDRESS"]
pub type W = crate :: W < u32 , super :: DFII_PI0_BADDRESS > ; # [doc = "Register DFII_PI0_BADDRESS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_BADDRESS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_baddress`"]
pub type DFII_PI0_BADDRESS_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `dfii_pi0_baddress`"]
pub struct DFII_PI0_BADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_BADDRESS_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_baddress (& self) -> DFII_PI0_BADDRESS_R { DFII_PI0_BADDRESS_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_baddress (& mut self) -> DFII_PI0_BADDRESS_W { DFII_PI0_BADDRESS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_wrdata](dfii_pi0_wrdata) module"]
pub type DFII_PI0_WRDATA = crate :: Reg < u32 , _DFII_PI0_WRDATA > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_WRDATA ; # [doc = "`read()` method returns [dfii_pi0_wrdata::R](dfii_pi0_wrdata::R) reader structure"]
impl crate :: Readable for DFII_PI0_WRDATA { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_wrdata::W](dfii_pi0_wrdata::W) writer structure"]
impl crate :: Writable for DFII_PI0_WRDATA { } # [doc = ""]
pub mod dfii_pi0_wrdata { # [doc = "Reader of register DFII_PI0_WRDATA"]
pub type R = crate :: R < u32 , super :: DFII_PI0_WRDATA > ; # [doc = "Writer for register DFII_PI0_WRDATA"]
pub type W = crate :: W < u32 , super :: DFII_PI0_WRDATA > ; # [doc = "Register DFII_PI0_WRDATA `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_WRDATA { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_wrdata`"]
pub type DFII_PI0_WRDATA_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `dfii_pi0_wrdata`"]
pub struct DFII_PI0_WRDATA_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_WRDATA_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& self) -> DFII_PI0_WRDATA_R { DFII_PI0_WRDATA_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& mut self) -> DFII_PI0_WRDATA_W { DFII_PI0_WRDATA_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_rddata](dfii_pi0_rddata) module"]
pub type DFII_PI0_RDDATA = crate :: Reg < u32 , _DFII_PI0_RDDATA > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_RDDATA ; # [doc = "`read()` method returns [dfii_pi0_rddata::R](dfii_pi0_rddata::R) reader structure"]
impl crate :: Readable for DFII_PI0_RDDATA { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_rddata::W](dfii_pi0_rddata::W) writer structure"]
impl crate :: Writable for DFII_PI0_RDDATA { } # [doc = ""]
pub mod dfii_pi0_rddata { # [doc = "Reader of register DFII_PI0_RDDATA"]
pub type R = crate :: R < u32 , super :: DFII_PI0_RDDATA > ; # [doc = "Writer for register DFII_PI0_RDDATA"]
pub type W = crate :: W < u32 , super :: DFII_PI0_RDDATA > ; # [doc = "Register DFII_PI0_RDDATA `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_RDDATA { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_rddata`"]
pub type DFII_PI0_RDDATA_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `dfii_pi0_rddata`"]
pub struct DFII_PI0_RDDATA_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_RDDATA_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn dfii_pi0_rddata (& self) -> DFII_PI0_RDDATA_R { DFII_PI0_RDDATA_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn dfii_pi0_rddata (& mut self) -> DFII_PI0_RDDATA_W { DFII_PI0_RDDATA_W { w : self } } } } } # [doc = "TIMER0"]
pub struct TIMER0 { _marker : PhantomData < * const () > } unsafe impl Send for TIMER0 { } impl TIMER0 { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const timer0 :: RegisterBlock { 0xf000_4800 as * const _ } } impl Deref for TIMER0 { type Target = timer0 :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * TIMER0 :: ptr () } } } # [doc = "TIMER0"]
pub mod timer0 { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub load : LOAD , # [doc = "0x04 - Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub reload : RELOAD , # [doc = "0x08 - Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub en : EN , # [doc = "0x0c - Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub update_value : UPDATE_VALUE , # [doc = "0x10 - Latched countdown value. This value is updated by writing to ``update_value``."]
pub value : VALUE , # [doc = "0x14 - This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x18 - When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x1c - This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load](load) module"]
pub type LOAD = crate :: Reg < u32 , _LOAD > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _LOAD ; # [doc = "`read()` method returns [load::R](load::R) reader structure"]
impl crate :: Readable for LOAD { } # [doc = "`write(|w| ..)` method takes [load::W](load::W) writer structure"]
impl crate :: Writable for LOAD { } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub mod load { # [doc = "Reader of register LOAD"]
pub type R = crate :: R < u32 , super :: LOAD > ; # [doc = "Writer for register LOAD"]
pub type W = crate :: W < u32 , super :: LOAD > ; # [doc = "Register LOAD `reset()`'s with value 0"]
impl crate :: ResetValue for super :: LOAD { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `load`"]
pub type LOAD_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `load`"]
pub struct LOAD_W < 'a > { w : & 'a mut W , } impl < 'a > LOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& self) -> LOAD_R { LOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& mut self) -> LOAD_W { LOAD_W { w : self } } } } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reload](reload) module"]
pub type RELOAD = crate :: Reg < u32 , _RELOAD > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RELOAD ; # [doc = "`read()` method returns [reload::R](reload::R) reader structure"]
impl crate :: Readable for RELOAD { } # [doc = "`write(|w| ..)` method takes [reload::W](reload::W) writer structure"]
impl crate :: Writable for RELOAD { } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub mod reload { # [doc = "Reader of register RELOAD"]
pub type R = crate :: R < u32 , super :: RELOAD > ; # [doc = "Writer for register RELOAD"]
pub type W = crate :: W < u32 , super :: RELOAD > ; # [doc = "Register RELOAD `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RELOAD { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `reload`"]
pub type RELOAD_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `reload`"]
pub struct RELOAD_W < 'a > { w : & 'a mut W , } impl < 'a > RELOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& self) -> RELOAD_R { RELOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& mut self) -> RELOAD_W { RELOAD_W { w : self } } } } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [en](en) module"]
pub type EN = crate :: Reg < u32 , _EN > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EN ; # [doc = "`read()` method returns [en::R](en::R) reader structure"]
impl crate :: Readable for EN { } # [doc = "`write(|w| ..)` method takes [en::W](en::W) writer structure"]
impl crate :: Writable for EN { } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub mod en { # [doc = "Reader of register EN"]
pub type R = crate :: R < u32 , super :: EN > ; # [doc = "Writer for register EN"]
pub type W = crate :: W < u32 , super :: EN > ; # [doc = "Register EN `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EN { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `en`"]
pub type EN_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `en`"]
pub struct EN_W < 'a > { w : & 'a mut W , } impl < 'a > EN_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& self) -> EN_R { EN_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& mut self) -> EN_W { EN_W { w : self } } } } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [update_value](update_value) module"]
pub type UPDATE_VALUE = crate :: Reg < u32 , _UPDATE_VALUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _UPDATE_VALUE ; # [doc = "`read()` method returns [update_value::R](update_value::R) reader structure"]
impl crate :: Readable for UPDATE_VALUE { } # [doc = "`write(|w| ..)` method takes [update_value::W](update_value::W) writer structure"]
impl crate :: Writable for UPDATE_VALUE { } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub mod update_value { # [doc = "Reader of register UPDATE_VALUE"]
pub type R = crate :: R < u32 , super :: UPDATE_VALUE > ; # [doc = "Writer for register UPDATE_VALUE"]
pub type W = crate :: W < u32 , super :: UPDATE_VALUE > ; # [doc = "Register UPDATE_VALUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: UPDATE_VALUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `update_value`"]
pub type UPDATE_VALUE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `update_value`"]
pub struct UPDATE_VALUE_W < 'a > { w : & 'a mut W , } impl < 'a > UPDATE_VALUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& self) -> UPDATE_VALUE_R { UPDATE_VALUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& mut self) -> UPDATE_VALUE_W { UPDATE_VALUE_W { w : self } } } } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [value](value) module"]
pub type VALUE = crate :: Reg < u32 , _VALUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _VALUE ; # [doc = "`read()` method returns [value::R](value::R) reader structure"]
impl crate :: Readable for VALUE { } # [doc = "`write(|w| ..)` method takes [value::W](value::W) writer structure"]
impl crate :: Writable for VALUE { } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``."]
pub mod value { # [doc = "Reader of register VALUE"]
pub type R = crate :: R < u32 , super :: VALUE > ; # [doc = "Writer for register VALUE"]
pub type W = crate :: W < u32 , super :: VALUE > ; # [doc = "Register VALUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: VALUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `value`"]
pub type VALUE_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `value`"]
pub struct VALUE_W < 'a > { w : & 'a mut W , } impl < 'a > VALUE_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& self) -> VALUE_R { VALUE_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& mut self) -> VALUE_W { VALUE_W { w : self } } } } # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](ev_status) module"]
pub type EV_STATUS = crate :: Reg < u32 , _EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_STATUS ; # [doc = "`read()` method returns [ev_status::R](ev_status::R) reader structure"]
impl crate :: Readable for EV_STATUS { } # [doc = "`write(|w| ..)` method takes [ev_status::W](ev_status::W) writer structure"]
impl crate :: Writable for EV_STATUS { } # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Reader of register EV_STATUS"]
pub type R = crate :: R < u32 , super :: EV_STATUS > ; # [doc = "Writer for register EV_STATUS"]
pub type W = crate :: W < u32 , super :: EV_STATUS > ; # [doc = "Register EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](ev_pending) module"]
pub type EV_PENDING = crate :: Reg < u32 , _EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_PENDING ; # [doc = "`read()` method returns [ev_pending::R](ev_pending::R) reader structure"]
impl crate :: Readable for EV_PENDING { } # [doc = "`write(|w| ..)` method takes [ev_pending::W](ev_pending::W) writer structure"]
impl crate :: Writable for EV_PENDING { } # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Reader of register EV_PENDING"]
pub type R = crate :: R < u32 , super :: EV_PENDING > ; # [doc = "Writer for register EV_PENDING"]
pub type W = crate :: W < u32 , super :: EV_PENDING > ; # [doc = "Register EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](ev_enable) module"]
pub type EV_ENABLE = crate :: Reg < u32 , _EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_ENABLE ; # [doc = "`read()` method returns [ev_enable::R](ev_enable::R) reader structure"]
impl crate :: Readable for EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [ev_enable::W](ev_enable::W) writer structure"]
impl crate :: Writable for EV_ENABLE { } # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Reader of register EV_ENABLE"]
pub type R = crate :: R < u32 , super :: EV_ENABLE > ; # [doc = "Writer for register EV_ENABLE"]
pub type W = crate :: W < u32 , super :: EV_ENABLE > ; # [doc = "Register EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } } # [doc = "UART"]
pub struct UART { _marker : PhantomData < * const () > } unsafe impl Send for UART { } impl UART { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const uart :: RegisterBlock { 0xf000_5000 as * const _ } } impl Deref for UART { type Target = uart :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * UART :: ptr () } } } # [doc = "UART"]
pub mod uart { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub rxtx : RXTX , # [doc = "0x04 - TX FIFO Full."]
pub txfull : TXFULL , # [doc = "0x08 - RX FIFO Empty."]
pub rxempty : RXEMPTY , # [doc = "0x0c - This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x10 - When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x14 - This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , # [doc = "0x18 - TX FIFO Empty."]
pub txempty : TXEMPTY , # [doc = "0x1c - RX FIFO Full."]
pub rxfull : RXFULL , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxtx](rxtx) module"]
pub type RXTX = crate :: Reg < u32 , _RXTX > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXTX ; # [doc = "`read()` method returns [rxtx::R](rxtx::R) reader structure"]
impl crate :: Readable for RXTX { } # [doc = "`write(|w| ..)` method takes [rxtx::W](rxtx::W) writer structure"]
impl crate :: Writable for RXTX { } # [doc = ""]
pub mod rxtx { # [doc = "Reader of register RXTX"]
pub type R = crate :: R < u32 , super :: RXTX > ; # [doc = "Writer for register RXTX"]
pub type W = crate :: W < u32 , super :: RXTX > ; # [doc = "Register RXTX `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXTX { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxtx`"]
pub type RXTX_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rxtx`"]
pub struct RXTX_W < 'a > { w : & 'a mut W , } impl < 'a > RXTX_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& self) -> RXTX_R { RXTX_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& mut self) -> RXTX_W { RXTX_W { w : self } } } } # [doc = "TX FIFO Full.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txfull](txfull) module"]
pub type TXFULL = crate :: Reg < u32 , _TXFULL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TXFULL ; # [doc = "`read()` method returns [txfull::R](txfull::R) reader structure"]
impl crate :: Readable for TXFULL { } # [doc = "`write(|w| ..)` method takes [txfull::W](txfull::W) writer structure"]
impl crate :: Writable for TXFULL { } # [doc = "TX FIFO Full."]
pub mod txfull { # [doc = "Reader of register TXFULL"]
pub type R = crate :: R < u32 , super :: TXFULL > ; # [doc = "Writer for register TXFULL"]
pub type W = crate :: W < u32 , super :: TXFULL > ; # [doc = "Register TXFULL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: TXFULL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `txfull`"]
pub type TXFULL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `txfull`"]
pub struct TXFULL_W < 'a > { w : & 'a mut W , } impl < 'a > TXFULL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& self) -> TXFULL_R { TXFULL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& mut self) -> TXFULL_W { TXFULL_W { w : self } } } } # [doc = "RX FIFO Empty.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxempty](rxempty) module"]
pub type RXEMPTY = crate :: Reg < u32 , _RXEMPTY > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXEMPTY ; # [doc = "`read()` method returns [rxempty::R](rxempty::R) reader structure"]
impl crate :: Readable for RXEMPTY { } # [doc = "`write(|w| ..)` method takes [rxempty::W](rxempty::W) writer structure"]
impl crate :: Writable for RXEMPTY { } # [doc = "RX FIFO Empty."]
pub mod rxempty { # [doc = "Reader of register RXEMPTY"]
pub type R = crate :: R < u32 , super :: RXEMPTY > ; # [doc = "Writer for register RXEMPTY"]
pub type W = crate :: W < u32 , super :: RXEMPTY > ; # [doc = "Register RXEMPTY `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXEMPTY { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxempty`"]
pub type RXEMPTY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rxempty`"]
pub struct RXEMPTY_W < 'a > { w : & 'a mut W , } impl < 'a > RXEMPTY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& self) -> RXEMPTY_R { RXEMPTY_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& mut self) -> RXEMPTY_W { RXEMPTY_W { w : self } } } } # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](ev_status) module"]
pub type EV_STATUS = crate :: Reg < u32 , _EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_STATUS ; # [doc = "`read()` method returns [ev_status::R](ev_status::R) reader structure"]
impl crate :: Readable for EV_STATUS { } # [doc = "`write(|w| ..)` method takes [ev_status::W](ev_status::W) writer structure"]
impl crate :: Writable for EV_STATUS { } # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Reader of register EV_STATUS"]
pub type R = crate :: R < u32 , super :: EV_STATUS > ; # [doc = "Writer for register EV_STATUS"]
pub type W = crate :: W < u32 , super :: EV_STATUS > ; # [doc = "Register EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](ev_pending) module"]
pub type EV_PENDING = crate :: Reg < u32 , _EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_PENDING ; # [doc = "`read()` method returns [ev_pending::R](ev_pending::R) reader structure"]
impl crate :: Readable for EV_PENDING { } # [doc = "`write(|w| ..)` method takes [ev_pending::W](ev_pending::W) writer structure"]
impl crate :: Writable for EV_PENDING { } # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Reader of register EV_PENDING"]
pub type R = crate :: R < u32 , super :: EV_PENDING > ; # [doc = "Writer for register EV_PENDING"]
pub type W = crate :: W < u32 , super :: EV_PENDING > ; # [doc = "Register EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](ev_enable) module"]
pub type EV_ENABLE = crate :: Reg < u32 , _EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_ENABLE ; # [doc = "`read()` method returns [ev_enable::R](ev_enable::R) reader structure"]
impl crate :: Readable for EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [ev_enable::W](ev_enable::W) writer structure"]
impl crate :: Writable for EV_ENABLE { } # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Reader of register EV_ENABLE"]
pub type R = crate :: R < u32 , super :: EV_ENABLE > ; # [doc = "Writer for register EV_ENABLE"]
pub type W = crate :: W < u32 , super :: EV_ENABLE > ; # [doc = "Register EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "TX FIFO Empty.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txempty](txempty) module"]
pub type TXEMPTY = crate :: Reg < u32 , _TXEMPTY > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TXEMPTY ; # [doc = "`read()` method returns [txempty::R](txempty::R) reader structure"]
impl crate :: Readable for TXEMPTY { } # [doc = "`write(|w| ..)` method takes [txempty::W](txempty::W) writer structure"]
impl crate :: Writable for TXEMPTY { } # [doc = "TX FIFO Empty."]
pub mod txempty { # [doc = "Reader of register TXEMPTY"]
pub type R = crate :: R < u32 , super :: TXEMPTY > ; # [doc = "Writer for register TXEMPTY"]
pub type W = crate :: W < u32 , super :: TXEMPTY > ; # [doc = "Register TXEMPTY `reset()`'s with value 0"]
impl crate :: ResetValue for super :: TXEMPTY { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `txempty`"]
pub type TXEMPTY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `txempty`"]
pub struct TXEMPTY_W < 'a > { w : & 'a mut W , } impl < 'a > TXEMPTY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& self) -> TXEMPTY_R { TXEMPTY_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& mut self) -> TXEMPTY_W { TXEMPTY_W { w : self } } } } # [doc = "RX FIFO Full.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxfull](rxfull) module"]
pub type RXFULL = crate :: Reg < u32 , _RXFULL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXFULL ; # [doc = "`read()` method returns [rxfull::R](rxfull::R) reader structure"]
impl crate :: Readable for RXFULL { } # [doc = "`write(|w| ..)` method takes [rxfull::W](rxfull::W) writer structure"]
impl crate :: Writable for RXFULL { } # [doc = "RX FIFO Full."]
pub mod rxfull { # [doc = "Reader of register RXFULL"]
pub type R = crate :: R < u32 , super :: RXFULL > ; # [doc = "Writer for register RXFULL"]
pub type W = crate :: W < u32 , super :: RXFULL > ; # [doc = "Register RXFULL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXFULL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxfull`"]
pub type RXFULL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rxfull`"]
pub struct RXFULL_W < 'a > { w : & 'a mut W , } impl < 'a > RXFULL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& self) -> RXFULL_R { RXFULL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& mut self) -> RXFULL_W { RXFULL_W { w : self } } } } } # [doc = "ETHMEM"]
pub struct ETHMEM { _marker : PhantomData < * const () > } unsafe impl Send for ETHMEM { } impl ETHMEM { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ethmem :: RegisterBlock { 0x8020_0000 as * const _ } } impl Deref for ETHMEM { type Target = ethmem :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * ETHMEM :: ptr () } } } # [doc = "ETHMEM"]
pub mod ethmem { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - rx buffers"]
pub rx_buffer_0 : [RX_BUFFER_0 ; 2048]
, # [doc = "0x800 - rx buffers"]
pub rx_buffer_1 : [RX_BUFFER_1 ; 2048]
, # [doc = "0x1000 - tx buffers"]
pub tx_buffer_0 : [TX_BUFFER_0 ; 2048]
, # [doc = "0x1800 - tx buffers"]
pub tx_buffer_1 : [TX_BUFFER_1 ; 2048]
, } # [doc = "rx buffers\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rx_buffer_0](rx_buffer_0) module"]
pub type RX_BUFFER_0 = crate :: Reg < u8 , _RX_BUFFER_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RX_BUFFER_0 ; # [doc = "`read()` method returns [rx_buffer_0::R](rx_buffer_0::R) reader structure"]
impl crate :: Readable for RX_BUFFER_0 { } # [doc = "rx buffers"]
pub mod rx_buffer_0 { # [doc = "Reader of register RX_BUFFER_0[%s]"]
pub type R = crate :: R < u8 , super :: RX_BUFFER_0 > ; # [doc = "Reader of field `rx_buffer_0`"]
pub type RX_BUFFER_0_R = crate :: R < u8 , u8 > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rx_buffer_0 (& self) -> RX_BUFFER_0_R { RX_BUFFER_0_R :: new ((self . bits & 0xff) as u8) } } } # [doc = "rx buffers\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rx_buffer_1](rx_buffer_1) module"]
pub type RX_BUFFER_1 = crate :: Reg < u8 , _RX_BUFFER_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RX_BUFFER_1 ; # [doc = "`read()` method returns [rx_buffer_1::R](rx_buffer_1::R) reader structure"]
impl crate :: Readable for RX_BUFFER_1 { } # [doc = "rx buffers"]
pub mod rx_buffer_1 { # [doc = "Reader of register RX_BUFFER_1[%s]"]
pub type R = crate :: R < u8 , super :: RX_BUFFER_1 > ; # [doc = "Reader of field `rx_buffer_1`"]
pub type RX_BUFFER_1_R = crate :: R < u8 , u8 > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rx_buffer_1 (& self) -> RX_BUFFER_1_R { RX_BUFFER_1_R :: new ((self . bits & 0xff) as u8) } } } # [doc = "tx buffers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tx_buffer_0](tx_buffer_0) module"]
pub type TX_BUFFER_0 = crate :: Reg < u8 , _TX_BUFFER_0 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TX_BUFFER_0 ; # [doc = "`read()` method returns [tx_buffer_0::R](tx_buffer_0::R) reader structure"]
impl crate :: Readable for TX_BUFFER_0 { } # [doc = "`write(|w| ..)` method takes [tx_buffer_0::W](tx_buffer_0::W) writer structure"]
impl crate :: Writable for TX_BUFFER_0 { } # [doc = "tx buffers"]
pub mod tx_buffer_0 { # [doc = "Reader of register TX_BUFFER_0[%s]"]
pub type R = crate :: R < u8 , super :: TX_BUFFER_0 > ; # [doc = "Writer for register TX_BUFFER_0[%s]"]
pub type W = crate :: W < u8 , super :: TX_BUFFER_0 > ; # [doc = "Register TX_BUFFER_0[%s]
`reset()`'s with value 0"]
impl crate :: ResetValue for super :: TX_BUFFER_0 { type Type = u8 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx_buffer_0`"]
pub type TX_BUFFER_0_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `tx_buffer_0`"]
pub struct TX_BUFFER_0_W < 'a > { w : & 'a mut W , } impl < 'a > TX_BUFFER_0_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u8) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn tx_buffer_0 (& self) -> TX_BUFFER_0_R { TX_BUFFER_0_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn tx_buffer_0 (& mut self) -> TX_BUFFER_0_W { TX_BUFFER_0_W { w : self } } } } # [doc = "tx buffers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tx_buffer_1](tx_buffer_1) module"]
pub type TX_BUFFER_1 = crate :: Reg < u8 , _TX_BUFFER_1 > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TX_BUFFER_1 ; # [doc = "`read()` method returns [tx_buffer_1::R](tx_buffer_1::R) reader structure"]
impl crate :: Readable for TX_BUFFER_1 { } # [doc = "`write(|w| ..)` method takes [tx_buffer_1::W](tx_buffer_1::W) writer structure"]
impl crate :: Writable for TX_BUFFER_1 { } # [doc = "tx buffers"]
pub mod tx_buffer_1 { # [doc = "Reader of register TX_BUFFER_1[%s]"]
pub type R = crate :: R < u8 , super :: TX_BUFFER_1 > ; # [doc = "Writer for register TX_BUFFER_1[%s]"]
pub type W = crate :: W < u8 , super :: TX_BUFFER_1 > ; # [doc = "Register TX_BUFFER_1[%s]
`reset()`'s with value 0"]
impl crate :: ResetValue for super :: TX_BUFFER_1 { type Type = u8 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx_buffer_1`"]
pub type TX_BUFFER_1_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `tx_buffer_1`"]
pub struct TX_BUFFER_1_W < 'a > { w : & 'a mut W , } impl < 'a > TX_BUFFER_1_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u8) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn tx_buffer_1 (& self) -> TX_BUFFER_1_R { TX_BUFFER_1_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn tx_buffer_1 (& mut self) -> TX_BUFFER_1_W { TX_BUFFER_1_W { w : self } } } } } # [no_mangle]
static mut DEVICE_PERIPHERALS : bool = false ; # [doc = r"All the peripherals"]
# [allow (non_snake_case)]
pub struct Peripherals { # [doc = "SPIFLASH_MMAP"]
pub SPIFLASH_MMAP : SPIFLASH_MMAP , # [doc = "SPIFLASH_PHY"]
pub SPIFLASH_PHY : SPIFLASH_PHY , # [doc = "CTRL"]
pub CTRL : CTRL , # [doc = "ETHMAC"]
pub ETHMAC : ETHMAC , # [doc = "ETHPHY"]
pub ETHPHY : ETHPHY , # [doc = "HUB75_PALETTE"]
pub HUB75_PALETTE : HUB75_PALETTE , # [doc = "HUB75"]
pub HUB75 : HUB75 , # [doc = "IDENTIFIER_MEM"]
pub IDENTIFIER_MEM : IDENTIFIER_MEM , # [doc = "SDRAM"]
pub SDRAM : SDRAM , # [doc = "TIMER0"]
pub TIMER0 : TIMER0 , # [doc = "UART"]
pub UART : UART , # [doc = "ETHMEM"]
pub ETHMEM : ETHMEM , } impl Peripherals { # [doc = r"Returns all the peripherals *once*"]
# [inline]
pub fn take () -> Option < Self > { riscv :: interrupt :: free (| _ | { if unsafe { DEVICE_PERIPHERALS } { None } else { Some (unsafe { Peripherals :: steal () }) } }) } # [doc = r"Unchecked version of `Peripherals::take`"]
# [inline]
pub unsafe fn steal () -> Self { DEVICE_PERIPHERALS = true ; Peripherals { SPIFLASH_MMAP : SPIFLASH_MMAP { _marker : PhantomData } , SPIFLASH_PHY : SPIFLASH_PHY { _marker : PhantomData } , CTRL : CTRL { _marker : PhantomData } , ETHMAC : ETHMAC { _marker : PhantomData } , ETHPHY : ETHPHY { _marker : PhantomData } , HUB75_PALETTE : HUB75_PALETTE { _marker : PhantomData } , HUB75 : HUB75 { _marker : PhantomData } , IDENTIFIER_MEM : IDENTIFIER_MEM { _marker : PhantomData } , SDRAM : SDRAM { _marker : PhantomData } , TIMER0 : TIMER0 { _marker : PhantomData } , UART : UART { _marker : PhantomData } , ETHMEM : ETHMEM { _marker : PhantomData } , } } }
